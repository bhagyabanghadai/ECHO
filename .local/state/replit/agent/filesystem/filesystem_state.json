{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ECHO - Emotional Memory Social Network\n\n## Overview\n\nECHO is a modern web application that serves as an AI-powered emotional memory social network. The application allows users to create voice-based memories tied to specific locations and emotions, which can then be discovered and \"echoed\" by other users. Built with a modern tech stack, ECHO combines React frontend, Express.js backend, and PostgreSQL database with Drizzle ORM.\n\n## MVP Features Implemented\n\nThe core MVP focuses on 3 high-impact features that create magical first-minute experiences:\n\n1. **✅ GPS-Based Unlock**: Users can discover emotional memories hidden in their physical location. The app uses geolocation to surface memories within a specific radius, creating location-aware storytelling.\n\n2. **✅ Real-Time Voice Posting**: Users can record voice memories that are instantly analyzed for emotional content. The app simulates AI emotion detection (joy, nostalgia, calm, etc.) and immediately processes recordings into shareable memories.\n\n3. **✅ Emotion-Aware Welcome**: New users experience a guided demo that showcases all three features in an interactive flow. The system demonstrates location discovery, voice recording with emotion analysis, and memory unlocking in a cohesive onboarding experience.\n\n## Recent Changes (August 1, 2025)\n\n- Implemented authentication modal windows with tabbed login/signup interface\n- Created MVP demo component showcasing the 3 core features\n- Added GPS-based memory discovery with distance calculations  \n- Built real-time voice recording simulation with emotion detection\n- Integrated location-aware memory unlocking system\n- Added database schema support for memories, unlocks, and geolocation data\n- **NEW**: Implemented interactive Google Maps global emotion map with:\n  - Globe view and standard map view toggle\n  - Zoom controls and interactive emotion filtering\n  - Real-time emotion data visualization with color-coded markers\n  - Click-to-explore functionality with live emotion points\n  - Emotion-specific filtering and detailed statistics\n  - Responsive control panels and legend systems\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThe application follows a full-stack architecture with clear separation between frontend and backend concerns:\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom ECHO brand colors and dark theme\n- **State Management**: TanStack Query for server state management\n- **Animations**: Framer Motion for smooth animations and transitions\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js for REST API endpoints\n- **Database ORM**: Drizzle ORM with PostgreSQL\n- **Session Management**: Built-in session handling for user authentication\n- **Development**: Hot module replacement with Vite integration\n\n## Key Components\n\n### Frontend Components\n1. **Landing Page**: Immersive hero section with interactive globe visualization\n2. **Voice Recorder**: Real-time voice recording with emotion detection simulation\n3. **Emotion Map**: Interactive visualization of global emotion data\n4. **Memory Cards**: Display of memory content with voice playback\n5. **Custom Cursor**: Enhanced user interaction feedback\n6. **Navigation**: Smooth scrolling navigation with glass morphism effects\n\n### Backend Services\n1. **Memory Management**: CRUD operations for voice memories with location data\n2. **Emotion Analysis**: Integration points for AI-powered emotion detection\n3. **Waitlist System**: Email collection for early access users\n4. **Location Services**: Geographic data handling for memory placement\n5. **User Management**: Authentication and profile management\n\n### Database Schema\nThe application uses PostgreSQL with the following main entities:\n- **Users**: User profiles with authentication data\n- **Memories**: Voice memories with emotion, location, and access control\n- **Memory Unlocks**: Tracking when users discover and interact with memories\n- **Emotion Profiles**: AI-generated emotional analysis data\n- **Waitlist Users**: Pre-launch user registration\n\n## Data Flow\n\n1. **Memory Creation**: Users record voice messages which are processed for emotion detection and stored with location data\n2. **Discovery**: Memories are surfaced to users based on proximity, emotion matching, or social connections\n3. **Interaction**: Users can \"echo\" (respond to) memories, creating threaded conversations\n4. **Analytics**: Emotion data is aggregated for insights and the global emotion map\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Components**: Radix UI primitives for accessible components\n- **Animations**: Framer Motion for smooth transitions\n- **Voice Recording**: Web Audio API for microphone access\n- **Location Services**: Browser Geolocation API\n\n### Backend Dependencies\n- **Database**: Neon serverless PostgreSQL\n- **Session Storage**: PostgreSQL-based session storage\n- **Development Tools**: TSX for TypeScript execution, ESBuild for production builds\n\n### Development Tools\n- **Package Manager**: npm with lockfile version 3\n- **Type Checking**: TypeScript with strict configuration\n- **Code Quality**: Tailwind CSS for consistent styling\n- **Build Process**: Vite for frontend, ESBuild for backend bundling\n\n## Deployment Strategy\n\nThe application is configured for deployment on Replit with the following setup:\n\n### Development Mode\n- Frontend served by Vite dev server with HMR\n- Backend runs with tsx for TypeScript execution\n- Database migrations managed by Drizzle Kit\n- Environment variables for database connection\n\n### Production Build\n- Frontend built to static assets with Vite\n- Backend bundled with ESBuild for Node.js\n- Single server serves both API and static files\n- Database schema deployed via Drizzle migrations\n\n### Environment Configuration\n- **Database**: PostgreSQL connection via DATABASE_URL environment variable\n- **Build Assets**: Static files served from dist/public directory\n- **API Routes**: RESTful endpoints under /api prefix\n- **Development**: Replit-specific tooling and error overlays\n\nThe application demonstrates modern web development practices with TypeScript throughout, comprehensive UI component library, and scalable database architecture ready for the emotional memory social network concept.","size_bytes":6571},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertMemorySchema, insertMemoryUnlockSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware with PostgreSQL store\n  const pgStore = connectPg(session);\n  app.use(session({\n    store: new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: false, // We already created the table\n      tableName: 'sessions'\n    }),\n    secret: process.env.SESSION_SECRET || 'echo-dev-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Authentication middleware\n  const requireAuth = async (req: any, res: any, next: any) => {\n    const userId = req.session?.userId;\n    if (!userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    \n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n    \n    req.user = user;\n    next();\n  };\n\n  // Authentication routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n      \n      const existingUsername = await storage.getUserByUsername(userData.username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n      \n      const newUser = await storage.createUser(userData);\n      \n      // Set session\n      (req.session as any).userId = newUser.id;\n      \n      // Don't return password\n      const { password, ...userWithoutPassword } = newUser;\n      res.json({ success: true, user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n  \n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n      \n      const user = await storage.validateUser(email, password);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // Set session\n      (req.session as any).userId = user.id;\n      \n      // Don't return password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ success: true, user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Error logging in:\", error);\n      res.status(500).json({ message: \"Failed to log in\" });\n    }\n  });\n  \n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n  \n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't return password\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error getting user:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Get global emotion map data (public)\n  app.get(\"/api/emotions/map\", async (req, res) => {\n    try {\n      const emotionMap = await storage.getEmotionMapData();\n      res.json({ data: emotionMap });\n    } catch (error) {\n      console.error(\"Error getting emotion map:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Memory routes (protected)\n  app.get(\"/api/memories/location\", requireAuth, async (req, res) => {\n    try {\n      const { lat, lng, radius = 10 } = req.query;\n      \n      if (!lat || !lng) {\n        return res.status(400).json({ message: \"Latitude and longitude are required\" });\n      }\n\n      const memories = await storage.getMemoriesNearLocation(\n        parseFloat(lat as string),\n        parseFloat(lng as string),\n        parseFloat(radius as string)\n      );\n      \n      res.json({ memories });\n    } catch (error) {\n      console.error(\"Error getting memories by location:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/memories/user\", requireAuth, async (req: any, res) => {\n    try {\n      const memories = await storage.getUserMemories(req.user.id);\n      res.json({ memories });\n    } catch (error) {\n      console.error(\"Error getting user memories:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/memories\", requireAuth, async (req: any, res) => {\n    try {\n      const memoryData = insertMemorySchema.parse(req.body);\n      const memory = await storage.createMemory({\n        ...memoryData,\n        userId: req.user.id\n      });\n      res.json({ memory });\n    } catch (error) {\n      console.error(\"Error creating memory:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/memories/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const memory = await storage.getMemoryById(id);\n      \n      if (!memory) {\n        return res.status(404).json({ message: \"Memory not found\" });\n      }\n      \n      res.json({ memory });\n    } catch (error) {\n      console.error(\"Error getting memory:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/memories/:id/unlock\", requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const unlockData = insertMemoryUnlockSchema.parse(req.body);\n      \n      const unlock = await storage.unlockMemory({\n        ...unlockData,\n        memoryId: id,\n        unlockedBy: req.user.id\n      });\n      \n      res.json({ unlock });\n    } catch (error) {\n      console.error(\"Error unlocking memory:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/memories/:id/unlocks\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const unlocks = await storage.getMemoryUnlocks(id);\n      res.json({ unlocks });\n    } catch (error) {\n      console.error(\"Error getting memory unlocks:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Memory management endpoints\n  app.post(\"/api/memories\", async (req, res) => {\n    try {\n      const sessionData = req.session as any;\n      if (!sessionData.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const memoryData = req.body;\n      const result = await storage.createMemory({\n        ...memoryData,\n        userId: sessionData.userId,\n      });\n      \n      res.json({ success: true, data: result });\n    } catch (error) {\n      console.error(\"Error creating memory:\", error);\n      res.status(500).json({ message: \"Failed to create memory\" });\n    }\n  });\n\n  app.get(\"/api/memories/nearby\", async (req, res) => {\n    try {\n      const sessionData = req.session as any;\n      if (!sessionData.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { lat, lng, radius = 5000 } = req.query; // radius in meters\n      if (!lat || !lng) {\n        return res.status(400).json({ message: \"Latitude and longitude required\" });\n      }\n\n      const memories = await storage.getMemoriesNearLocation(\n        parseFloat(lat as string),\n        parseFloat(lng as string),\n        parseInt(radius as string)\n      );\n      \n      res.json({ data: memories });\n    } catch (error) {\n      console.error(\"Error fetching nearby memories:\", error);\n      res.status(500).json({ message: \"Failed to fetch nearby memories\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":9031},"server/storage.ts":{"content":"import { \n  users, \n  memories, \n  memoryUnlocks, \n  type User, \n  type InsertUser, \n  type Memory, \n  type InsertMemory,\n  type MemoryUnlock,\n  type InsertMemoryUnlock\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  validateUser(email: string, password: string): Promise<User | null>;\n  \n  // Memory operations\n  createMemory(insertMemory: InsertMemory & { userId: string }): Promise<Memory>;\n  getMemoriesNearLocation(lat: number, lng: number, radius: number): Promise<Memory[]>;\n  getUserMemories(userId: string): Promise<Memory[]>;\n  getMemoryById(id: string): Promise<Memory | undefined>;\n  \n  // Memory unlock operations\n  unlockMemory(insertUnlock: InsertMemoryUnlock & { unlockedBy: string }): Promise<MemoryUnlock>;\n  getMemoryUnlocks(memoryId: string): Promise<MemoryUnlock[]>;\n  \n  // Emotion operations\n  getEmotionMapData(): Promise<{ emotion: string; count: number; avgLat: number; avgLng: number }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        password: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async validateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Memory operations\n  async createMemory(insertMemory: InsertMemory & { userId: string }): Promise<Memory> {\n    const [memory] = await db\n      .insert(memories)\n      .values(insertMemory)\n      .returning();\n    return memory;\n  }\n\n  async getMemoriesNearLocation(lat: number, lng: number, radius: number): Promise<Memory[]> {\n    // For now, return all memories. In production, implement proper geospatial queries\n    return await db.select().from(memories);\n  }\n\n  async getUserMemories(userId: string): Promise<Memory[]> {\n    return await db.select().from(memories).where(eq(memories.userId, userId));\n  }\n\n  async getMemoryById(id: string): Promise<Memory | undefined> {\n    const [memory] = await db.select().from(memories).where(eq(memories.id, id));\n    return memory;\n  }\n\n  // Memory unlock operations\n  async unlockMemory(insertUnlock: InsertMemoryUnlock & { unlockedBy: string }): Promise<MemoryUnlock> {\n    const [unlock] = await db\n      .insert(memoryUnlocks)\n      .values(insertUnlock)\n      .returning();\n    return unlock;\n  }\n\n  async getMemoryUnlocks(memoryId: string): Promise<MemoryUnlock[]> {\n    return await db.select().from(memoryUnlocks).where(eq(memoryUnlocks.memoryId, memoryId));\n  }\n\n  // Emotion operations with sample data for demo\n  async getEmotionMapData(): Promise<{ emotion: string; count: number; avgLat: number; avgLng: number }[]> {\n    // Return sample data for demo purposes\n    return [\n      { emotion: \"nostalgia\", count: 1, avgLat: 35.6597, avgLng: 139.7006 },\n      { emotion: \"peace\", count: 1, avgLat: 51.5074, avgLng: -0.1278 },\n      { emotion: \"love\", count: 1, avgLat: 40.7829, avgLng: -73.9654 },\n      { emotion: \"joy\", count: 1, avgLat: -33.8568, avgLng: 151.2153 },\n      { emotion: \"warmth\", count: 1, avgLat: 48.8566, avgLng: 2.2936 }\n    ];\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":4284},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, real, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  avatar: text(\"avatar\"),\n  bio: text(\"bio\"),\n  hasCompletedOnboarding: integer(\"has_completed_onboarding\").default(0), // 0 = false, 1 = true\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const memories = pgTable(\"memories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(), // Memory title\n  description: text(\"description\"), // Optional description\n  content: text(\"content\"), // Voice transcript or text content\n  audioData: text(\"audio_data\"), // Base64 encoded audio data\n  audioUrl: text(\"audio_url\"), // URL to audio file\n  emotion: text(\"emotion\").notNull(), // AI-detected emotion\n  emotionConfidence: real(\"emotion_confidence\").default(0),\n  latitude: real(\"latitude\").notNull(),\n  longitude: real(\"longitude\").notNull(),\n  locationName: text(\"location_name\"),\n  duration: integer(\"duration\").default(0), // Audio duration in seconds\n  accessType: text(\"access_type\").notNull().default(\"public\"), // public, friends, emotion_match, private\n  isActive: integer(\"is_active\").default(1), // 1 = sleeping, 2 = unlocked\n  unlockCount: integer(\"unlock_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const memoryUnlocks = pgTable(\"memory_unlocks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  memoryId: varchar(\"memory_id\").notNull().references(() => memories.id),\n  unlockedBy: varchar(\"unlocked_by\").notNull().references(() => users.id),\n  echoContent: text(\"echo_content\"), // Response/echo content\n  echoAudioUrl: text(\"echo_audio_url\"),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow().notNull(),\n});\n\nexport const emotionProfiles = pgTable(\"emotion_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  emotionData: jsonb(\"emotion_data\").notNull(), // Stores emotion analysis data\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\nexport const waitlistUsers = pgTable(\"waitlist_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  source: text(\"source\").default(\"landing_page\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  avatar: true,\n  bio: true,\n});\n\nexport const insertMemorySchema = createInsertSchema(memories).pick({\n  title: true,\n  description: true,\n  content: true,\n  audioData: true,\n  audioUrl: true,\n  emotion: true,\n  emotionConfidence: true,\n  latitude: true,\n  longitude: true,\n  locationName: true,\n  duration: true,\n  accessType: true,\n  isActive: true,\n});\n\nexport const insertMemoryUnlockSchema = createInsertSchema(memoryUnlocks).pick({\n  memoryId: true,\n  echoContent: true,\n  echoAudioUrl: true,\n});\n\nexport const insertWaitlistUserSchema = createInsertSchema(waitlistUsers).pick({\n  email: true,\n  source: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertMemory = z.infer<typeof insertMemorySchema>;\nexport type Memory = typeof memories.$inferSelect;\nexport type InsertMemoryUnlock = z.infer<typeof insertMemoryUnlockSchema>;\nexport type MemoryUnlock = typeof memoryUnlocks.$inferSelect;\nexport type InsertWaitlistUser = z.infer<typeof insertWaitlistUserSchema>;\nexport type WaitlistUser = typeof waitlistUsers.$inferSelect;\nexport type EmotionProfile = typeof emotionProfiles.$inferSelect;\n","size_bytes":4123},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Privacy from \"@/pages/privacy\";\nimport Terms from \"@/pages/terms\";\nimport Support from \"@/pages/support\";\nimport Contact from \"@/pages/contact\";\nimport CustomCursor from \"@/components/custom-cursor\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-purple-950/20 to-black flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin mx-auto mb-4\"></div>\n          <div className=\"text-white text-lg\">Loading ECHO...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={isAuthenticated ? Dashboard : Home} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/support\" component={Support} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <CustomCursor />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1745},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* ECHO Brand Colors in HSL format */\n  --background: hsl(240, 10%, 5%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(267, 87%, 67%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n\n  /* ECHO Emotion Colors */\n  --echo-dark: hsl(0, 0%, 5%);\n  --echo-nostalgia: hsl(258, 54%, 54%);\n  --echo-nostalgia-light: hsl(250, 72%, 64%);\n  --echo-love: hsl(330, 81%, 70%);\n  --echo-love-light: hsl(45, 93%, 58%);\n  --echo-peace: hsl(188, 95%, 42%);\n  --echo-peace-light: hsl(151, 69%, 46%);\n  --echo-accent: hsl(267, 100%, 70%);\n  --echo-accent-pink: hsl(329, 100%, 80%);\n  --echo-accent-teal: hsl(173, 100%, 70%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(267, 87%, 67%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background: var(--echo-dark);\n    color: var(--foreground);\n    overflow-x: hidden;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .custom-cursor {\n    width: 20px;\n    height: 20px;\n    border: 2px solid var(--echo-accent);\n    border-radius: 50%;\n    position: fixed;\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n    z-index: 9999;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(5px);\n    opacity: 0.6;\n  }\n  \n  .custom-cursor.hover {\n    width: 40px;\n    height: 40px;\n    border-color: var(--echo-accent);\n    opacity: 1;\n  }\n\n  .memory-pulse {\n    position: relative;\n  }\n\n  .memory-pulse::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background: radial-gradient(circle, var(--echo-accent) 0%, transparent 70%);\n    transform: translate(-50%, -50%);\n    animation: ripple 3s infinite;\n    opacity: 0.4;\n  }\n\n  .emotion-orb {\n    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.3), transparent 50%);\n    border-radius: 50%;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .emotion-orb::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transform: rotate(45deg);\n    animation: shimmer 3s infinite;\n  }\n\n  .voice-wave {\n    display: flex;\n    align-items: center;\n    gap: 2px;\n  }\n\n  .voice-wave .bar {\n    width: 3px;\n    background: linear-gradient(to top, var(--echo-accent), var(--echo-accent-pink));\n    border-radius: 2px;\n    animation: wave 1.5s ease-in-out infinite;\n  }\n\n  .voice-wave .bar:nth-child(2) { animation-delay: 0.1s; }\n  .voice-wave .bar:nth-child(3) { animation-delay: 0.2s; }\n  .voice-wave .bar:nth-child(4) { animation-delay: 0.3s; }\n  .voice-wave .bar:nth-child(5) { animation-delay: 0.4s; }\n\n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .gradient-text {\n    background: linear-gradient(45deg, var(--echo-accent), var(--echo-accent-pink));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .parallax-container {\n    transform-style: preserve-3d;\n    perspective: 1000px;\n  }\n\n  .perspective-1000 {\n    perspective: 1000px;\n  }\n\n  /* Updated custom cursor for better performance */\n  .custom-cursor {\n    width: 20px;\n    height: 20px;\n    background: linear-gradient(45deg, #a855f7, #ec4899);\n    border-radius: 50%;\n    transition: all 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    will-change: transform;\n  }\n\n  .custom-cursor.hover {\n    transform: scale(1.5) !important;\n    background: linear-gradient(45deg, #ec4899, #f59e0b);\n    box-shadow: 0 0 20px rgba(236, 72, 153, 0.5);\n  }\n}\n\n@layer utilities {\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-ripple {\n    animation: ripple 2s cubic-bezier(0, 0, 0.2, 1) infinite;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .animate-shimmer {\n    animation: shimmer 3s infinite;\n  }\n\n  .animate-wave {\n    animation: wave 1.5s ease-in-out infinite;\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes glow {\n  0% { box-shadow: 0 0 20px rgba(170, 102, 255, 0.3); }\n  100% { box-shadow: 0 0 40px rgba(170, 102, 255, 0.6); }\n}\n\n@keyframes ripple {\n  0% { transform: translate(-50%, -50%) scale(0); opacity: 1; }\n  100% { transform: translate(-50%, -50%) scale(4); opacity: 0; }\n}\n\n@keyframes shimmer {\n  0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }\n  50% { transform: translateX(100%) translateY(100%) rotate(45deg); }\n  100% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }\n}\n\n@keyframes wave {\n  0%, 100% { height: 10px; }\n  50% { height: 30px; }\n}\n\n/* Hide scrollbar but keep functionality */\nbody::-webkit-scrollbar {\n  width: 0px;\n  background: transparent;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .custom-cursor {\n    display: none;\n  }\n}\n","size_bytes":6402},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/auth-forms.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, UserPlus, LogIn } from \"lucide-react\";\n\nconst signupSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n});\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(1, \"Password is required\")\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface AuthFormsProps {\n  onSuccess?: () => void;\n}\n\nexport function AuthForms({ onSuccess }: AuthFormsProps) {\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const signupForm = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      bio: \"\"\n    }\n  });\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupFormData) => {\n      const { confirmPassword, ...signupData } = data;\n      return apiRequest(\"POST\", \"/api/auth/signup\", signupData);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Welcome to ECHO!\",\n        description: \"Your account has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've been logged in successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\", \n        description: error.message || \"Please check your credentials.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSignupSubmit = (data: SignupFormData) => {\n    signupMutation.mutate(data);\n  };\n\n  const onLoginSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-black/90 backdrop-blur-sm\">\n      <Card className=\"w-full max-w-md bg-black/80 border-white/20 backdrop-blur-sm\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n            Welcome to ECHO\n          </CardTitle>\n          <CardDescription className=\"text-gray-300\">\n            Create and discover emotional memories around the world\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2 bg-gray-800 border-gray-700\">\n              <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-gray-700 text-gray-300\">\n                <LogIn className=\"w-4 h-4 mr-2\" />\n                Login\n              </TabsTrigger>\n              <TabsTrigger value=\"signup\" className=\"data-[state=active]:bg-gray-700 text-gray-300\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Sign Up\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <Form {...loginForm}>\n                <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={loginForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Email</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter your email\" \n                            type=\"email\"\n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={loginForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Password</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter your password\" \n                            type=\"password\"\n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n                    disabled={loginMutation.isPending}\n                  >\n                    {loginMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Signing in...\n                      </>\n                    ) : (\n                      'Sign In'\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </TabsContent>\n            \n            <TabsContent value=\"signup\">\n              <Form {...signupForm}>\n                <form onSubmit={signupForm.handleSubmit(onSignupSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={signupForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Username</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Choose a username\" \n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={signupForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Email</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter your email\" \n                            type=\"email\"\n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={signupForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Password</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Create a password\" \n                            type=\"password\"\n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={signupForm.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Confirm Password</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Confirm your password\" \n                            type=\"password\"\n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={signupForm.control}\n                    name=\"bio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Bio (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Tell us about yourself...\" \n                            className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700\"\n                    disabled={signupMutation.isPending}\n                  >\n                    {signupMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Creating account...\n                      </>\n                    ) : (\n                      'Create Account'\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11792},"client/src/components/auth-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLogin, useSignup } from \"@/hooks/useAuth\";\nimport { Loader2, UserPlus, LogIn } from \"lucide-react\";\n\nconst signupSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n});\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(1, \"Password is required\")\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  defaultTab?: \"login\" | \"signup\";\n}\n\nexport function AuthModal({ open, onOpenChange, defaultTab = \"login\" }: AuthModalProps) {\n  const [activeTab, setActiveTab] = useState(defaultTab);\n  const { toast } = useToast();\n  const loginMutation = useLogin();\n  const signupMutation = useSignup();\n\n  const signupForm = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      bio: \"\"\n    }\n  });\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const handleSignup = (data: SignupFormData) => {\n    const { confirmPassword, ...signupData } = data;\n    signupMutation.mutate(signupData, {\n      onSuccess: () => {\n        toast({\n          title: \"Welcome to ECHO!\",\n          description: \"Your account has been created successfully.\",\n        });\n        onOpenChange(false);\n        signupForm.reset();\n      },\n      onError: (error: any) => {\n        toast({\n          title: \"Signup failed\",\n          description: error.message || \"Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    });\n  };\n\n  const handleLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data, {\n      onSuccess: () => {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You've been logged in successfully.\",\n        });\n        onOpenChange(false);\n        loginForm.reset();\n      },\n      onError: (error: any) => {\n        toast({\n          title: \"Login failed\",\n          description: error.message || \"Please check your credentials.\",\n          variant: \"destructive\",\n        });\n      }\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md bg-black/95 border-white/20 backdrop-blur-sm animate-in fade-in-0 zoom-in-95 duration-300\">\n        <DialogHeader className=\"text-center\">\n          <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n            Welcome to ECHO\n          </DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            Create and discover emotional memories around the world\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"login\" | \"signup\")} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-gray-800 border-gray-700\">\n            <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-gray-700 text-gray-300\">\n              <LogIn className=\"w-4 h-4 mr-2\" />\n              Login\n            </TabsTrigger>\n            <TabsTrigger value=\"signup\" className=\"data-[state=active]:bg-gray-700 text-gray-300\">\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Sign Up\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\" className=\"mt-6\">\n            <Form {...loginForm}>\n              <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n                <FormField\n                  control={loginForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-blue-500\"\n                          placeholder=\"Enter your email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={loginForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\" \n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-blue-500\"\n                          placeholder=\"Enter your password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Logging in...\n                    </>\n                  ) : (\n                    <>\n                      <LogIn className=\"w-4 h-4 mr-2\" />\n                      Login\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n          \n          <TabsContent value=\"signup\" className=\"mt-6\">\n            <Form {...signupForm}>\n              <form onSubmit={signupForm.handleSubmit(handleSignup)} className=\"space-y-4\">\n                <FormField\n                  control={signupForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-blue-500\"\n                          placeholder=\"Choose a username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={signupForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\" \n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-blue-500\"\n                          placeholder=\"Enter your email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={signupForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\" \n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-blue-500\"\n                          placeholder=\"Create a password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={signupForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\" \n                          className=\"bg-gray-800 border-gray-600 text-white focus:border-blue-500\"\n                          placeholder=\"Confirm your password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white\"\n                  disabled={signupMutation.isPending}\n                >\n                  {signupMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Creating account...\n                    </>\n                  ) : (\n                    <>\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Create Account\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10803},"client/src/components/custom-cursor.tsx":{"content":"import { useEffect, useState, useRef } from \"react\";\n\nexport default function CustomCursor() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n  const cursorRef = useRef<HTMLDivElement>(null);\n  const requestRef = useRef<number>();\n\n  useEffect(() => {\n    let currentX = 0;\n    let currentY = 0;\n    let targetX = 0;\n    let targetY = 0;\n\n    const updateMousePosition = (e: MouseEvent) => {\n      targetX = e.clientX;\n      targetY = e.clientY;\n    };\n\n    const animate = () => {\n      // Smooth interpolation for cursor movement\n      currentX += (targetX - currentX) * 0.2;\n      currentY += (targetY - currentY) * 0.2;\n\n      if (cursorRef.current) {\n        cursorRef.current.style.transform = `translate3d(${currentX - 10}px, ${currentY - 10}px, 0)`;\n      }\n\n      requestRef.current = requestAnimationFrame(animate);\n    };\n\n    const handleMouseOver = (e: MouseEvent) => {\n      const target = e.target as HTMLElement;\n      if (target.closest('button, a, [data-hover-element], .memory-pulse')) {\n        setIsHovering(true);\n      } else {\n        setIsHovering(false);\n      }\n    };\n\n    window.addEventListener(\"mousemove\", updateMousePosition);\n    window.addEventListener(\"mouseover\", handleMouseOver);\n    requestRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", updateMousePosition);\n      window.removeEventListener(\"mouseover\", handleMouseOver);\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      ref={cursorRef}\n      className={`custom-cursor ${isHovering ? \"hover\" : \"\"} hidden md:block`}\n      style={{\n        position: 'fixed',\n        pointerEvents: 'none',\n        zIndex: 9999,\n        mixBlendMode: 'difference',\n      }}\n    />\n  );\n}\n","size_bytes":1889},"client/src/components/emotion-map.tsx":{"content":"import { GoogleMapsEmotionMap } from \"./google-maps-emotion-map\";\n\nconst EmotionMap = () => {\n  return <GoogleMapsEmotionMap />;\n};\n\nexport default EmotionMap;\n\n\n","size_bytes":162},"client/src/components/feature-showcase.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Mic2, MapPin, Brain } from \"lucide-react\";\n\nexport default function FeatureShowcase() {\n  const features = [\n    {\n      icon: Mic2,\n      title: \"🎙️ Voice-First\",\n      description: \"Share emotions through voice, the most human way to connect\",\n      gradient: \"from-pink-500 to-yellow-400\",\n      mockup: (\n        <div className=\"bg-slate-900 rounded-2xl h-full p-4 flex flex-col\">\n          <div className=\"text-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-pink-500 to-yellow-400 rounded-full mx-auto mb-2 flex items-center justify-center\">\n              <Mic2 className=\"w-8 h-8 text-white\" />\n            </div>\n            <p className=\"text-xs text-gray-400\">Tap to record</p>\n          </div>\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"voice-wave\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"bar\" style={{ animationDelay: `${i * 0.1}s` }} />\n              ))}\n            </div>\n          </div>\n          <div className=\"text-center text-xs text-gray-400\">\n            <p>💜 Emotion: Peaceful</p>\n          </div>\n        </div>\n      ),\n    },\n    {\n      icon: MapPin,\n      title: \"🧭 Location Magic\",\n      description: \"Memories unlock when you're in the right place at the right time\",\n      gradient: \"from-purple-600 to-purple-400\",\n      mockup: (\n        <div className=\"bg-slate-900 rounded-2xl h-full p-4 flex flex-col\">\n          <div className=\"text-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-purple-600 to-purple-400 rounded-full mx-auto mb-2 flex items-center justify-center\">\n              <MapPin className=\"w-8 h-8 text-white\" />\n            </div>\n            <p className=\"text-xs text-gray-400\">Nearby memories</p>\n          </div>\n          <div className=\"flex-1 relative bg-black/30 rounded-xl\">\n            <div className=\"absolute top-1/4 left-1/3 w-2 h-2 bg-cyan-400 rounded-full animate-pulse\" />\n            <div className=\"absolute bottom-1/3 right-1/4 w-2 h-2 bg-pink-400 rounded-full animate-pulse\" style={{ animationDelay: \"0.5s\" }} />\n            <div className=\"absolute top-1/2 left-1/2 w-3 h-3 bg-purple-400 rounded-full border border-white animate-pulse\" />\n          </div>\n          <div className=\"text-center text-xs text-gray-400\">\n            <p>📍 Central Park • 3 memories</p>\n          </div>\n        </div>\n      ),\n    },\n    {\n      icon: Brain,\n      title: \"🧠 Emotion AI\",\n      description: \"AI understands and matches emotional states across memories\",\n      gradient: \"from-cyan-500 to-emerald-400\",\n      mockup: (\n        <div className=\"bg-slate-900 rounded-2xl h-full p-4 flex flex-col\">\n          <div className=\"text-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-cyan-500 to-emerald-400 rounded-full mx-auto mb-2 flex items-center justify-center\">\n              <Brain className=\"w-8 h-8 text-white\" />\n            </div>\n            <p className=\"text-xs text-gray-400\">Emotion analysis</p>\n          </div>\n          <div className=\"flex-1 space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-xs text-gray-400\">💜 Nostalgia</span>\n              <div className=\"w-16 h-1 bg-gray-700 rounded-full\">\n                <div className=\"w-12 h-1 bg-purple-400 rounded-full\" />\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-xs text-gray-400\">❤️ Love</span>\n              <div className=\"w-16 h-1 bg-gray-700 rounded-full\">\n                <div className=\"w-8 h-1 bg-pink-400 rounded-full\" />\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-xs text-gray-400\">😌 Peace</span>\n              <div className=\"w-16 h-1 bg-gray-700 rounded-full\">\n                <div className=\"w-14 h-1 bg-cyan-400 rounded-full\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"text-center text-xs text-gray-400\">\n            <p>AI matched your emotions</p>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <div className=\"grid md:grid-cols-3 gap-8\">\n        {features.map((feature, index) => (\n          <motion.div\n            key={feature.title}\n            className=\"text-center\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: index * 0.2 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"relative mx-auto mb-6 w-48 h-96 bg-gradient-to-b from-gray-800 to-gray-900 rounded-3xl p-6 glass-morphism\">\n              {feature.mockup}\n            </div>\n            <h3 className=\"text-xl font-medium mb-2 text-white\">{feature.title}</h3>\n            <p className=\"text-gray-400 text-sm\">{feature.description}</p>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5145},"client/src/components/google-maps-emotion-map.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Globe, Map, Layers, Filter, MapPin, Zap, RotateCcw, Search, Maximize, Minimize, Navigation, Crosshair } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\n\ninterface EmotionData {\n  emotion: string;\n  count: number;\n  lat: number;\n  lng: number;\n}\n\n// Declare Google Maps types\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst emotionColors = {\n  joy: \"#FFD700\",\n  sadness: \"#4169E1\", \n  anger: \"#DC143C\",\n  fear: \"#800080\",\n  surprise: \"#FFA500\",\n  disgust: \"#228B22\",\n  nostalgia: \"#DDA0DD\",\n  love: \"#FF69B4\",\n  excitement: \"#FF4500\",\n  calm: \"#87CEEB\",\n  contemplative: \"#9370DB\",\n  hopeful: \"#32CD32\",\n  grateful: \"#FFB6C1\"\n};\n\nexport function GoogleMapsEmotionMap() {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const [map, setMap] = useState<any>(null);\n  const [searchBox, setSearchBox] = useState<any>(null);\n  const [isGlobeView, setIsGlobeView] = useState(false);\n  const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);\n  const [showEmotionPanel, setShowEmotionPanel] = useState(true);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [zoomLevel, setZoomLevel] = useState(3);\n  const [markers, setMarkers] = useState<any[]>([]);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n  \n  const { hasLocation, latitude, longitude } = useGeolocation();\n\n  // Fetch emotion map data\n  const { data: emotionData, isLoading } = useQuery<{ data: EmotionData[] }>({\n    queryKey: [\"/api/emotions/map\"],\n  });\n\n  useEffect(() => {\n    const initGoogleMap = async () => {\n      if (!mapRef.current) return;\n\n      try {\n        const loader = new Loader({\n          apiKey: import.meta.env.VITE_GOOGLE_MAPS_API_KEY!,\n          version: \"weekly\",\n          libraries: [\"places\", \"geometry\"]\n        });\n\n        await loader.load();\n        \n        // Start with user location if available, otherwise global center\n        const initialCenter = hasLocation && latitude && longitude \n          ? { lat: latitude, lng: longitude }\n          : { lat: 20, lng: 0 };\n        const initialZoom = hasLocation ? 12 : 2;\n\n        const mapInstance = new window.google.maps.Map(mapRef.current, {\n          center: initialCenter,\n          zoom: initialZoom,\n          mapTypeId: window.google.maps.MapTypeId.ROADMAP,\n          styles: [\n            {\n              featureType: \"all\",\n              elementType: \"geometry.fill\",\n              stylers: [{ color: \"#1a1a2e\" }]\n            },\n            {\n              featureType: \"all\",\n              elementType: \"labels.text.fill\",\n              stylers: [{ color: \"#ffffff\" }]\n            },\n            {\n              featureType: \"water\",\n              elementType: \"geometry\",\n              stylers: [{ color: \"#0f172a\" }]\n            },\n            {\n              featureType: \"administrative.country\",\n              elementType: \"geometry.stroke\",\n              stylers: [{ color: \"#6366f1\", weight: 1 }]\n            },\n            {\n              featureType: \"road\",\n              elementType: \"geometry\",\n              stylers: [{ color: \"#374151\" }]\n            },\n            {\n              featureType: \"poi\",\n              elementType: \"geometry\",\n              stylers: [{ color: \"#4b5563\" }]\n            }\n          ],\n          disableDefaultUI: true,\n          zoomControl: true,\n          zoomControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_CENTER\n          },\n          fullscreenControl: false,\n          mapTypeControl: false,\n          streetViewControl: true,\n          streetViewControlOptions: {\n            position: window.google.maps.ControlPosition.RIGHT_TOP\n          },\n        });\n\n        setMap(mapInstance);\n        setMapLoaded(true);\n        setZoomLevel(initialZoom);\n\n        // Set user location if available\n        if (hasLocation && latitude && longitude) {\n          setUserLocation({ lat: latitude, lng: longitude });\n          \n          // Add user location marker\n          new window.google.maps.Marker({\n            position: { lat: latitude, lng: longitude },\n            map: mapInstance,\n            title: \"Your Location\",\n            icon: {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              scale: 8,\n              fillColor: \"#3b82f6\",\n              fillOpacity: 1,\n              strokeColor: \"#ffffff\",\n              strokeWeight: 3,\n            },\n          });\n        }\n\n        // Initialize search functionality\n        if (searchInputRef.current) {\n          const searchBoxInstance = new window.google.maps.places.SearchBox(searchInputRef.current);\n          setSearchBox(searchBoxInstance);\n          \n          mapInstance.addListener(\"bounds_changed\", () => {\n            searchBoxInstance.setBounds(mapInstance.getBounds()!);\n          });\n\n          searchBoxInstance.addListener(\"places_changed\", () => {\n            const places = searchBoxInstance.getPlaces();\n            if (places?.length === 0) return;\n\n            const place = places![0];\n            if (!place.geometry || !place.geometry.location) return;\n\n            // Focus on the searched location\n            mapInstance.setCenter(place.geometry.location);\n            mapInstance.setZoom(15);\n            \n            // Search for memories near this location\n            searchMemoriesNearLocation(place.geometry.location.lat(), place.geometry.location.lng());\n          });\n        }\n\n        // Add click listener for interactivity\n        mapInstance.addListener(\"click\", (event: any) => {\n          if (event.latLng) {\n            const lat = event.latLng.lat();\n            const lng = event.latLng.lng();\n            searchMemoriesNearLocation(lat, lng);\n          }\n        });\n\n        // Listen for zoom changes\n        mapInstance.addListener(\"zoom_changed\", () => {\n          const zoom = mapInstance.getZoom();\n          setZoomLevel(zoom);\n        });\n\n      } catch (error) {\n        console.error(\"Error loading Google Maps:\", error);\n        // Fallback to demo visualization if API fails\n        if (mapRef.current) {\n          mapRef.current.innerHTML = `\n            <div class=\"flex items-center justify-center h-full bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900 rounded-lg\">\n              <div class=\"text-center p-8\">\n                <Globe class=\"w-16 h-16 mx-auto mb-4 text-purple-400\" />\n                <h3 class=\"text-xl font-semibold text-white mb-2\">Google Maps Loading...</h3>\n                <p class=\"text-gray-400\">Initializing interactive map</p>\n              </div>\n            </div>\n          `;\n        }\n      }\n    };\n\n    initGoogleMap();\n  }, [hasLocation, latitude, longitude]);\n\n  // Function to search for memories near a location\n  const searchMemoriesNearLocation = (lat: number, lng: number) => {\n    console.log(`Searching for memories near: ${lat.toFixed(4)}, ${lng.toFixed(4)}`);\n    // In a real implementation, this would query your backend for nearby memories\n    // For now, we'll highlight existing markers within a certain radius\n    markers.forEach(marker => {\n      const markerPos = marker.getPosition();\n      const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\n        new window.google.maps.LatLng(lat, lng),\n        markerPos\n      );\n      \n      if (distance < 50000) { // 50km radius\n        marker.setAnimation(window.google.maps.Animation.BOUNCE);\n        setTimeout(() => marker.setAnimation(null), 2000);\n      }\n    });\n  };\n\n  // Add emotion markers to the map\n  useEffect(() => {\n    if (!map || !emotionData?.data) return;\n\n    // Clear existing markers\n    markers.forEach(marker => marker.setMap(null));\n    setMarkers([]);\n\n    const newMarkers: any[] = [];\n\n    emotionData.data.forEach((emotion) => {\n      // Skip if filtering by specific emotion\n      if (selectedEmotion && emotion.emotion !== selectedEmotion) return;\n\n      // Ensure we have valid coordinates\n      const lat = typeof emotion.lat === 'number' ? emotion.lat : parseFloat(emotion.lat) || 0;\n      const lng = typeof emotion.lng === 'number' ? emotion.lng : parseFloat(emotion.lng) || 0;\n      \n      const marker = new window.google.maps.Marker({\n        position: { lat, lng },\n        map: map,\n        title: `${emotion.emotion}: ${emotion.count} memories`,\n        icon: {\n          path: window.google.maps.SymbolPath.CIRCLE,\n          scale: Math.min(Math.max(emotion.count * 8, 12), 30),\n          fillColor: emotionColors[emotion.emotion as keyof typeof emotionColors] || \"#888888\",\n          fillOpacity: 0.8,\n          strokeColor: \"#ffffff\",\n          strokeWeight: 2,\n        },\n        animation: window.google.maps.Animation.DROP,\n      });\n\n      // Create info window with custom styling\n      const infoWindow = new window.google.maps.InfoWindow({\n        content: `\n          <div style=\"background: #1a202c; color: white; padding: 12px; border-radius: 8px; min-width: 200px;\">\n            <h3 style=\"margin: 0 0 8px 0; font-size: 18px; font-weight: bold; text-transform: capitalize; color: ${emotionColors[emotion.emotion as keyof typeof emotionColors] || '#ffffff'};\">\n              ${emotion.emotion}\n            </h3>\n            <p style=\"margin: 0 0 8px 0; color: #cbd5e0;\">\n              ${emotion.count} emotional ${emotion.count === 1 ? 'memory' : 'memories'}\n            </p>\n            <div style=\"width: 100%; height: 4px; background: ${emotionColors[emotion.emotion as keyof typeof emotionColors] || '#888888'}; border-radius: 2px; margin-top: 8px;\"></div>\n          </div>\n        `\n      });\n\n      marker.addListener(\"click\", () => {\n        infoWindow.open(map, marker);\n      });\n\n      // Add bounce animation on hover\n      marker.addListener(\"mouseover\", () => {\n        marker.setAnimation(window.google.maps.Animation.BOUNCE);\n      });\n\n      marker.addListener(\"mouseout\", () => {\n        marker.setAnimation(null);\n      });\n\n      newMarkers.push(marker);\n    });\n\n    setMarkers(newMarkers);\n  }, [map, emotionData, selectedEmotion]);\n\n  const toggleMapType = () => {\n    if (!map) return;\n    \n    setIsGlobeView(!isGlobeView);\n    \n    if (!isGlobeView) {\n      // Switch to satellite view for globe-like experience\n      map.setMapTypeId(window.google.maps.MapTypeId.SATELLITE);\n      map.setTilt(45);\n      if (map.getZoom() > 5) map.setZoom(3);\n    } else {\n      // Switch back to styled map\n      map.setMapTypeId(window.google.maps.MapTypeId.ROADMAP);\n      map.setTilt(0);\n    }\n  };\n\n  const handleZoom = (direction: 'in' | 'out') => {\n    if (!map) return;\n    \n    const currentZoom = map.getZoom();\n    const newZoom = direction === 'in' \n      ? Math.min(currentZoom + 2, 18) \n      : Math.max(currentZoom - 2, 1);\n    \n    map.setZoom(newZoom);\n    setZoomLevel(newZoom);\n  };\n\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n    \n    // Trigger a resize event after fullscreen toggle to ensure map redraws correctly\n    setTimeout(() => {\n      if (map && window.google?.maps?.event) {\n        window.google.maps.event.trigger(map, 'resize');\n      }\n    }, 100);\n  };\n\n  const goToUserLocation = () => {\n    if (map && userLocation) {\n      map.setCenter(userLocation);\n      map.setZoom(15);\n    } else if (map && hasLocation && latitude && longitude) {\n      const location = { lat: latitude, lng: longitude };\n      map.setCenter(location);\n      map.setZoom(15);\n      setUserLocation(location);\n    }\n  };\n\n  const focusOnEmotion = (emotion: string) => {\n    const newSelectedEmotion = selectedEmotion === emotion ? null : emotion;\n    setSelectedEmotion(newSelectedEmotion);\n    \n    // If an emotion is selected, find and focus on the first location with that emotion\n    if (newSelectedEmotion && emotionData?.data && map) {\n      const emotionLocation = emotionData.data.find(item => item.emotion === newSelectedEmotion);\n      if (emotionLocation) {\n        map.setCenter({ lat: emotionLocation.lat, lng: emotionLocation.lng });\n        map.setZoom(8);\n        \n        // Highlight the specific emotion markers\n        markers.forEach(marker => {\n          const title = marker.getTitle();\n          if (title.includes(newSelectedEmotion)) {\n            marker.setAnimation(window.google.maps.Animation.BOUNCE);\n            setTimeout(() => marker.setAnimation(null), 2000);\n          }\n        });\n      }\n    } else if (!newSelectedEmotion && map) {\n      // Reset to global view when clearing filter\n      map.setCenter({ lat: 20, lng: 0 });\n      map.setZoom(2);\n    }\n  };\n\n  const emotionCounts = emotionData?.data?.reduce((acc, item) => {\n    acc[item.emotion] = (acc[item.emotion] || 0) + item.count;\n    return acc;\n  }, {} as Record<string, number>) || {};\n\n  const topEmotions = Object.entries(emotionCounts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 6);\n\n  return (\n    <div className={`relative bg-gray-900 rounded-lg overflow-hidden transition-all duration-300 ${\n      isFullscreen \n        ? 'fixed inset-0 z-50 rounded-none w-screen h-screen' \n        : 'w-full h-96'\n    }`}>\n      {/* Search Bar */}\n      <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 z-10 w-80\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            ref={searchInputRef}\n            type=\"text\"\n            placeholder=\"Search for places or memories...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-white/90 backdrop-blur-sm border-gray-300 focus:border-purple-500 focus:ring-purple-500\"\n          />\n        </div>\n      </div>\n\n      {/* Interactive Map Container */}\n      <div \n        ref={mapRef} \n        className={`w-full transition-all duration-300 ${\n          isFullscreen ? 'h-screen' : 'h-full'\n        }`} \n      />\n      \n      {/* Control Panel - Top Left */}\n      <div className=\"absolute top-20 left-4 space-y-2\">\n        <Button\n          onClick={toggleMapType}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"bg-white/90 backdrop-blur-sm hover:bg-white text-gray-900 border-gray-300 shadow-lg\"\n        >\n          {isGlobeView ? <Map className=\"w-4 h-4 mr-2\" /> : <Globe className=\"w-4 h-4 mr-2\" />}\n          {isGlobeView ? \"Map\" : \"Satellite\"}\n        </Button>\n        \n        <Button\n          onClick={goToUserLocation}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"bg-white/90 backdrop-blur-sm hover:bg-white text-gray-900 border-gray-300 shadow-lg\"\n          disabled={!hasLocation}\n        >\n          <Navigation className=\"w-4 h-4 mr-2\" />\n          My Location\n        </Button>\n        \n        <Button\n          onClick={toggleFullscreen}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"bg-white/90 backdrop-blur-sm hover:bg-white text-gray-900 border-gray-300 shadow-lg\"\n        >\n          {isFullscreen ? <Minimize className=\"w-4 h-4 mr-2\" /> : <Maximize className=\"w-4 h-4 mr-2\" />}\n          {isFullscreen ? \"Exit\" : \"Fullscreen\"}\n        </Button>\n        \n        <Button\n          onClick={() => setShowEmotionPanel(!showEmotionPanel)}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"bg-white/90 backdrop-blur-sm hover:bg-white text-gray-900 border-gray-300 shadow-lg\"\n        >\n          <Layers className=\"w-4 h-4 mr-2\" />\n          Emotions\n        </Button>\n      </div>\n\n      {/* Emotion Filter Panel - Top Right */}\n      <AnimatePresence>\n        {showEmotionPanel && (\n          <motion.div\n            initial={{ opacity: 0, x: 300 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 300 }}\n            className={`absolute top-20 right-4 ${isFullscreen ? 'w-96' : 'w-80'}`}\n          >\n            <Card className=\"bg-white/95 backdrop-blur-sm border-gray-300 shadow-xl\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg text-gray-900 flex items-center gap-2\">\n                  <Filter className=\"w-5 h-5\" />\n                  Global Emotions Live\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {topEmotions.map(([emotion, count]) => (\n                    <div\n                      key={emotion}\n                      className={`cursor-pointer transition-all capitalize p-3 text-sm rounded-lg border ${\n                        selectedEmotion === emotion \n                          ? \"ring-2 ring-purple-400 bg-purple-100 text-purple-900 border-purple-400\" \n                          : \"hover:bg-gray-100 bg-gray-50 border-gray-300 text-gray-700 hover:border-gray-400\"\n                      }`}\n                      onClick={() => focusOnEmotion(emotion)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <div \n                            className=\"w-3 h-3 rounded-full mr-2 shadow-lg\" \n                            style={{ \n                              backgroundColor: emotionColors[emotion as keyof typeof emotionColors] || \"#888\",\n                              boxShadow: `0 0 8px ${emotionColors[emotion as keyof typeof emotionColors]}50`\n                            }}\n                          />\n                          <span className=\"font-medium\">{emotion}</span>\n                        </div>\n                        <span className=\"text-xs bg-gray-200 px-2 py-1 rounded-full\">\n                          {count}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {selectedEmotion && (\n                  <motion.div\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"p-4 bg-gradient-to-r from-purple-100 to-pink-100 rounded-lg border border-purple-300\"\n                  >\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Zap className=\"w-4 h-4 text-purple-400\" />\n                      <span className=\"text-gray-900 font-semibold capitalize\">\n                        {selectedEmotion} Filter Active\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-700 mb-3\">\n                      Viewing global {selectedEmotion} memories and emotional patterns.\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={() => setSelectedEmotion(null)}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 border-purple-300 text-purple-700 hover:bg-purple-50\"\n                      >\n                        Clear Filter\n                      </Button>\n                      <Button\n                        onClick={() => handleZoom('in')}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-purple-300 text-purple-700 hover:bg-purple-50\"\n                      >\n                        <MapPin className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </motion.div>\n                )}\n                \n                {/* Real-time Stats */}\n                <div className=\"border-t border-gray-300 pt-3\">\n                  <div className=\"flex justify-between text-xs text-gray-600 mb-2\">\n                    <span>Live Updates</span>\n                    <span className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                      Active\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-900\">\n                    <span className=\"font-bold\">{emotionData?.data?.length || 0}</span> cities\n                    <span className=\"text-gray-600 ml-2\">•</span>\n                    <span className=\"font-bold ml-2\">{Object.values(emotionCounts).reduce((a, b) => a + b, 0)}</span> memories\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-gray-900/80 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Globe className=\"w-8 h-8 animate-spin text-purple-400 mx-auto mb-2\" />\n            <p className=\"text-white text-sm\">Loading global emotions...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Map Legend - Bottom Left */}\n      <div className=\"absolute bottom-4 left-4\">\n        <Card className=\"bg-white/90 backdrop-blur-sm border-gray-300 shadow-lg\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4 text-xs\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n                <span className=\"text-gray-700\">Low</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 bg-purple-400 rounded-full\"></div>\n                <span className=\"text-gray-700\">Medium</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 bg-purple-400 rounded-full\"></div>\n                <span className=\"text-gray-700\">High</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Status Indicators - Bottom Right */}\n      <div className=\"absolute bottom-4 right-4 space-y-2\">\n        <Card className=\"bg-white/90 backdrop-blur-sm border-gray-300 shadow-lg\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center gap-2 text-xs text-gray-700\">\n              <Crosshair className=\"w-3 h-3\" />\n              <span>Zoom: {zoomLevel}x</span>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {userLocation && (\n          <Card className=\"bg-white/90 backdrop-blur-sm border-gray-300 shadow-lg\">\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center gap-2 text-xs text-gray-700\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n                <span>Location Active</span>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":23372},"client/src/components/hero-globe.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useRef, useEffect, useState } from \"react\";\n\ninterface MemoryPulse {\n  id: string;\n  x: number;\n  y: number;\n  emotion: string;\n  delay: number;\n  location: string;\n  content: string;\n}\n\nexport default function HeroGlobe() {\n  const globeRef = useRef<HTMLDivElement>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [isHovered, setIsHovered] = useState(false);\n  const [selectedMemory, setSelectedMemory] = useState<MemoryPulse | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\n  const [isSpinning, setIsSpinning] = useState(false);\n\n  const memoryPulses: MemoryPulse[] = [\n    { id: \"1\", x: 25, y: 30, emotion: \"love\", delay: 0, location: \"Paris, France\", content: \"Warmth of love near the Eiffel Tower...\" },\n    { id: \"2\", x: 70, y: 60, emotion: \"peace\", delay: 1, location: \"London, UK\", content: \"Found peace by the Thames today...\" },\n    { id: \"3\", x: 45, y: 25, emotion: \"nostalgia\", delay: 2, location: \"Shibuya, Tokyo\", content: \"Missing the cherry blossoms...\" },\n    { id: \"4\", x: 80, y: 40, emotion: \"joy\", delay: 0.5, location: \"Sydney, Australia\", content: \"Pure joy watching the sunrise...\" },\n    { id: \"5\", x: 30, y: 70, emotion: \"warmth\", delay: 1.5, location: \"Central Park, NYC\", content: \"Love overflowing in the heart of the city...\" },\n  ];\n\n  const emotionColors = {\n    love: \"bg-pink-400\",\n    peace: \"bg-cyan-400\",\n    nostalgia: \"bg-purple-400\",\n    joy: \"bg-yellow-400\",\n    warmth: \"bg-orange-400\",\n  };\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (globeRef.current && !isSpinning) {\n        const rect = globeRef.current.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        \n        const newX = (e.clientX - centerX) / 8;\n        const newY = (e.clientY - centerY) / 8;\n        \n        setMousePosition({ x: newX, y: newY });\n        setRotation({ x: newY * 0.5, y: newX * 0.5 });\n      }\n    };\n\n    // Auto-spin when not hovering\n    let spinInterval: NodeJS.Timeout;\n    if (!isHovered && !isSpinning) {\n      spinInterval = setInterval(() => {\n        setRotation(prev => ({ \n          x: prev.x + 0.5, \n          y: prev.y + 0.3 \n        }));\n      }, 50);\n    }\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      if (spinInterval) clearInterval(spinInterval);\n    };\n  }, [isHovered, isSpinning]);\n\n  return (\n    <motion.div \n      ref={globeRef}\n      className=\"relative mx-auto mb-12 w-80 h-80 md:w-96 md:h-96 perspective-1000\"\n      onHoverStart={() => setIsHovered(true)}\n      onHoverEnd={() => setIsHovered(false)}\n      onClick={() => {\n        setIsSpinning(!isSpinning);\n        if (!isSpinning) {\n          // Trigger a random spin animation\n          setRotation({ \n            x: Math.random() * 360, \n            y: Math.random() * 360 \n          });\n        }\n      }}\n    >\n      <motion.div\n        className=\"w-full h-full emotion-orb animate-float memory-pulse cursor-pointer bg-gradient-to-br from-purple-600 via-pink-500 to-purple-400 relative overflow-hidden\"\n        style={{\n          transform: `rotateY(${rotation.y}deg) rotateX(${rotation.x}deg)`,\n          transformStyle: 'preserve-3d',\n        }}\n        whileHover={{ \n          scale: 1.05,\n          boxShadow: \"0 0 40px rgba(168, 85, 247, 0.4)\"\n        }}\n        whileTap={{ scale: 0.95 }}\n        transition={{ \n          type: \"spring\", \n          stiffness: 100,\n          transform: { duration: isSpinning ? 2 : 0.3 }\n        }}\n      >\n        {/* Globe grid lines for more realistic feel */}\n        <div className=\"absolute inset-0 opacity-20\">\n          {[...Array(8)].map((_, i) => (\n            <div\n              key={`meridian-${i}`}\n              className=\"absolute bg-white/30\"\n              style={{\n                left: `${(i * 12.5)}%`,\n                top: 0,\n                width: '1px',\n                height: '100%',\n                transform: `rotateY(${i * 22.5}deg)`,\n                transformOrigin: 'center',\n              }}\n            />\n          ))}\n          {[...Array(6)].map((_, i) => (\n            <div\n              key={`parallel-${i}`}\n              className=\"absolute bg-white/30 rounded-full border border-white/20\"\n              style={{\n                left: '10%',\n                right: '10%',\n                top: `${10 + i * 15}%`,\n                height: '1px',\n              }}\n            />\n          ))}\n        </div>\n        {/* Memory pulses on globe */}\n        {memoryPulses.map((pulse) => (\n          <motion.div\n            key={pulse.id}\n            className={`absolute w-4 h-4 ${emotionColors[pulse.emotion as keyof typeof emotionColors]} rounded-full animate-pulse-slow cursor-pointer shadow-lg border-2 border-white/50`}\n            style={{\n              top: `${pulse.y}%`,\n              left: `${pulse.x}%`,\n              animationDelay: `${pulse.delay}s`,\n              transform: `translateZ(20px)`,\n              zIndex: 10,\n            }}\n            whileHover={{ \n              scale: 1.8,\n              boxShadow: \"0 0 20px currentColor\",\n              z: 20\n            }}\n            whileTap={{ scale: 1.2 }}\n            onMouseEnter={(e) => {\n              const rect = e.currentTarget.getBoundingClientRect();\n              setTooltipPosition({ \n                x: rect.left + rect.width / 2, \n                y: rect.top - 10 \n              });\n              setSelectedMemory(pulse);\n            }}\n            onMouseLeave={() => {\n              setSelectedMemory(null);\n            }}\n            onClick={(e) => {\n              e.stopPropagation();\n              console.log(`Clicked ${pulse.emotion} memory in ${pulse.location}`);\n              // Add a ripple effect\n              const ripple = document.createElement('div');\n              ripple.className = 'absolute inset-0 rounded-full bg-white/50 animate-ping';\n              e.currentTarget.appendChild(ripple);\n              setTimeout(() => ripple.remove(), 1000);\n            }}\n            data-hover-element\n          >\n            {/* Pulse ring effect */}\n            <motion.div\n              className=\"absolute inset-0 rounded-full border-2 border-current opacity-50\"\n              animate={{\n                scale: [1, 2, 1],\n                opacity: [0.5, 0, 0.5],\n              }}\n              transition={{\n                duration: 2,\n                repeat: Infinity,\n                delay: pulse.delay,\n              }}\n            />\n          </motion.div>\n        ))}\n\n        {/* Additional atmospheric elements */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/5 to-transparent rounded-full\" />\n        <div className=\"absolute top-4 right-8 w-2 h-2 bg-white/80 rounded-full animate-pulse\" />\n        <div className=\"absolute bottom-12 left-6 w-1 h-1 bg-cyan-300 rounded-full animate-pulse\" style={{ animationDelay: '1s' }} />\n        <div className=\"absolute top-1/3 left-4 w-1 h-1 bg-pink-300 rounded-full animate-pulse\" style={{ animationDelay: '2s' }} />\n\n        {/* Globe shine effect */}\n        <motion.div\n          className=\"absolute inset-0 rounded-full bg-gradient-to-tr from-white/30 via-transparent to-transparent\"\n          animate={{\n            rotate: [0, 360],\n          }}\n          transition={{\n            duration: 20,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n        />\n\n        {/* Memory tooltip */}\n        {selectedMemory && (\n          <motion.div\n            className=\"fixed glass-morphism rounded-xl p-4 pointer-events-none z-50 max-w-xs transform -translate-x-1/2\"\n            style={{\n              left: tooltipPosition.x,\n              top: tooltipPosition.y,\n            }}\n            initial={{ opacity: 0, scale: 0.8, y: 10 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.8, y: 10 }}\n          >\n            <div className=\"text-sm\">\n              <p className=\"text-gray-400 mb-1\">Memory from</p>\n              <p className=\"text-white font-medium\">{selectedMemory.location}</p>\n              <p className={`text-${\n                selectedMemory.emotion === 'love' ? 'pink' :\n                selectedMemory.emotion === 'peace' ? 'cyan' :\n                selectedMemory.emotion === 'nostalgia' ? 'purple' :\n                selectedMemory.emotion === 'joy' ? 'yellow' : 'orange'\n              }-400 text-xs mb-2`}>\n                {selectedMemory.emotion === 'love' ? '❤️' :\n                 selectedMemory.emotion === 'peace' ? '😌' :\n                 selectedMemory.emotion === 'nostalgia' ? '💜' :\n                 selectedMemory.emotion === 'joy' ? '✨' : '💕'} {selectedMemory.emotion}\n              </p>\n              <p className=\"text-gray-300 text-xs italic\">\"{selectedMemory.content}\"</p>\n            </div>\n          </motion.div>\n        )}\n\n        {/* General hover tooltip */}\n        {isHovered && !selectedMemory && (\n          <motion.div\n            className=\"absolute -top-16 left-1/2 transform -translate-x-1/2 bg-black/80 backdrop-blur px-4 py-2 rounded-lg text-sm text-white pointer-events-none\"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 10 }}\n          >\n            Click memory pulses to hear whispered emotions...\n          </motion.div>\n        )}\n      </motion.div>\n    </motion.div>\n  );\n}\n","size_bytes":9671},"client/src/components/interactive-emotion-map.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Globe, Map, Layers, Filter } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n// Google Maps type declarations\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\ninterface EmotionData {\n  emotion: string;\n  count: number;\n  lat: number;\n  lng: number;\n}\n\nconst emotionColors = {\n  joy: \"#FFD700\",\n  sadness: \"#4169E1\", \n  anger: \"#DC143C\",\n  fear: \"#800080\",\n  surprise: \"#FFA500\",\n  disgust: \"#228B22\",\n  nostalgia: \"#DDA0DD\",\n  love: \"#FF69B4\",\n  excitement: \"#FF4500\",\n  calm: \"#87CEEB\",\n  contemplative: \"#9370DB\",\n  hopeful: \"#32CD32\",\n  grateful: \"#FFB6C1\"\n};\n\nexport function InteractiveEmotionMap() {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<any>(null);\n  const [isGlobeView, setIsGlobeView] = useState(false);\n  const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);\n  const [showEmotionPanel, setShowEmotionPanel] = useState(true);\n  const [markers, setMarkers] = useState<any[]>([]);\n  const [mapLoaded, setMapLoaded] = useState(false);\n\n  // Fetch emotion map data\n  const { data: emotionData, isLoading } = useQuery<{ data: EmotionData[] }>({\n    queryKey: [\"/api/emotions/map\"],\n  });\n\n  useEffect(() => {\n    const loadGoogleMaps = () => {\n      // Create fallback demo map with interactive features\n      if (mapRef.current) {\n        setMapLoaded(true);\n        mapRef.current.innerHTML = `\n          <div class=\"flex items-center justify-center h-full bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900 rounded-lg relative overflow-hidden\">\n            <div class=\"absolute inset-0 bg-black/50\"></div>\n            <div class=\"relative z-10 text-center p-8\">\n              <div class=\"w-32 h-32 mx-auto mb-6 relative\">\n                <div class=\"absolute inset-0 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full opacity-20 animate-pulse\"></div>\n                <div class=\"absolute inset-4 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full opacity-40 animate-ping\"></div>\n                <div class=\"absolute inset-8 bg-white rounded-full flex items-center justify-center\">\n                  <svg class=\"w-8 h-8 text-purple-600\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"/>\n                  </svg>\n                </div>\n              </div>\n              <h3 class=\"text-2xl font-bold text-white mb-2\">Global Emotion Map</h3>\n              <p class=\"text-gray-300 mb-4\">Interactive mapping with globe view</p>\n              <div class=\"flex justify-center gap-2 text-sm text-gray-400\">\n                <span class=\"bg-purple-500/20 px-2 py-1 rounded\">Zoom enabled</span>\n                <span class=\"bg-blue-500/20 px-2 py-1 rounded\">Globe view</span>\n                <span class=\"bg-green-500/20 px-2 py-1 rounded\">Emotion filters</span>\n              </div>\n            </div>\n            \n            <!-- Simulated emotion points -->\n            <div class=\"absolute top-1/4 left-1/3 w-3 h-3 bg-purple-400 rounded-full animate-pulse\"></div>\n            <div class=\"absolute bottom-1/3 right-1/4 w-2 h-2 bg-pink-400 rounded-full animate-pulse\"></div>\n            <div class=\"absolute top-1/2 left-1/4 w-4 h-4 bg-blue-400 rounded-full animate-pulse\"></div>\n            <div class=\"absolute bottom-1/4 left-1/2 w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n            <div class=\"absolute top-1/3 right-1/3 w-3 h-3 bg-yellow-400 rounded-full animate-pulse\"></div>\n          </div>\n        `;\n      }\n    };\n\n    loadGoogleMaps();\n  }, []);\n\n  // Simulate interactive emotion visualization\n  useEffect(() => {\n    if (!mapLoaded || !emotionData?.data) return;\n    \n    // In a real implementation, this would add markers to the Google Map\n    console.log(\"Emotion data loaded:\", emotionData.data);\n    console.log(\"Selected emotion filter:\", selectedEmotion);\n  }, [mapLoaded, emotionData, selectedEmotion]);\n\n  const toggleMapType = () => {\n    setIsGlobeView(!isGlobeView);\n    \n    // Simulate map type change with visual feedback\n    if (mapRef.current) {\n      const currentClass = mapRef.current.querySelector('.bg-gradient-to-br');\n      if (currentClass) {\n        if (!isGlobeView) {\n          currentClass.className = currentClass.className.replace(\n            'from-gray-900 via-purple-900/20 to-gray-900',\n            'from-blue-900 via-cyan-900/20 to-blue-900'\n          );\n        } else {\n          currentClass.className = currentClass.className.replace(\n            'from-blue-900 via-cyan-900/20 to-blue-900',\n            'from-gray-900 via-purple-900/20 to-gray-900'\n          );\n        }\n      }\n    }\n  };\n\n  const focusOnEmotion = (emotion: string) => {\n    setSelectedEmotion(selectedEmotion === emotion ? null : emotion);\n  };\n\n  const emotionCounts = emotionData?.data?.reduce((acc, item) => {\n    acc[item.emotion] = (acc[item.emotion] || 0) + item.count;\n    return acc;\n  }, {} as Record<string, number>) || {};\n\n  const topEmotions = Object.entries(emotionCounts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 6);\n\n  return (\n    <div className=\"relative w-full h-96 bg-gray-900 rounded-lg overflow-hidden\">\n      {/* Map Container */}\n      <div ref={mapRef} className=\"w-full h-full\" />\n      \n      {/* Controls Overlay */}\n      <div className=\"absolute top-4 left-4 space-y-2\">\n        <Button\n          onClick={toggleMapType}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"bg-gray-800/80 backdrop-blur-sm hover:bg-gray-700/80\"\n        >\n          {isGlobeView ? <Map className=\"w-4 h-4 mr-2\" /> : <Globe className=\"w-4 h-4 mr-2\" />}\n          {isGlobeView ? \"Map View\" : \"Globe View\"}\n        </Button>\n        \n        <Button\n          onClick={() => setShowEmotionPanel(!showEmotionPanel)}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"bg-gray-800/80 backdrop-blur-sm hover:bg-gray-700/80\"\n        >\n          <Layers className=\"w-4 h-4 mr-2\" />\n          Emotions\n        </Button>\n      </div>\n\n      {/* Emotion Filter Panel */}\n      <AnimatePresence>\n        {showEmotionPanel && (\n          <motion.div\n            initial={{ opacity: 0, x: 300 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 300 }}\n            className=\"absolute top-4 right-4 w-72\"\n          >\n            <Card className=\"bg-gray-800/90 backdrop-blur-sm border-gray-700\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg text-white flex items-center gap-2\">\n                  <Filter className=\"w-5 h-5\" />\n                  Global Emotions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {topEmotions.map(([emotion, count]) => (\n                    <div\n                      key={emotion}\n                      className={`cursor-pointer transition-all capitalize p-2 text-xs rounded-md border ${\n                        selectedEmotion === emotion \n                          ? \"ring-2 ring-purple-400 bg-purple-600 text-white\" \n                          : \"hover:bg-gray-600 bg-gray-700 border-gray-600 text-gray-300\"\n                      }`}\n                      style={{\n                        backgroundColor: selectedEmotion === emotion \n                          ? emotionColors[emotion as keyof typeof emotionColors] \n                          : undefined,\n                        color: selectedEmotion === emotion ? \"#000\" : undefined\n                      }}\n                      onClick={() => focusOnEmotion(emotion)}\n                    >\n                      <div className=\"flex items-center\">\n                        <div \n                          className=\"w-2 h-2 rounded-full mr-1\" \n                          style={{ \n                            backgroundColor: emotionColors[emotion as keyof typeof emotionColors] || \"#888\"\n                          }}\n                        />\n                        {emotion} ({count})\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {selectedEmotion && (\n                  <motion.div\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"mt-3 p-3 bg-gray-700/50 rounded-lg\"\n                  >\n                    <p className=\"text-sm text-gray-300\">\n                      Showing <span className=\"text-white font-semibold capitalize\">{selectedEmotion}</span> memories globally\n                    </p>\n                    <Button\n                      onClick={() => setSelectedEmotion(null)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"mt-2 w-full\"\n                    >\n                      Show All Emotions\n                    </Button>\n                  </motion.div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-gray-900/80 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Globe className=\"w-8 h-8 animate-spin text-purple-400 mx-auto mb-2\" />\n            <p className=\"text-white text-sm\">Loading global emotions...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Legend */}\n      <div className=\"absolute bottom-4 left-4\">\n        <Card className=\"bg-gray-800/80 backdrop-blur-sm border-gray-700\">\n          <CardContent className=\"p-3\">\n            <p className=\"text-xs text-gray-300 mb-2\">Emotion Intensity</p>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n              <span className=\"text-xs text-gray-400\">Low</span>\n              <div className=\"w-3 h-3 bg-purple-400 rounded-full\"></div>\n              <span className=\"text-xs text-gray-400\">High</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10531},"client/src/components/memory-card.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Play, MapPin } from \"lucide-react\";\n\nexport default function MemoryCard() {\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <motion.div\n        className=\"glass-morphism rounded-3xl p-8 mb-8\"\n        initial={{ opacity: 0, y: 30 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.8 }}\n        viewport={{ once: true }}\n      >\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-purple-600 to-purple-400 rounded-full flex items-center justify-center\">\n              <Heart className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-400\">Sleeping memory from</p>\n              <p className=\"text-purple-400 flex items-center gap-1\">\n                <MapPin className=\"w-4 h-4\" />\n                Shibuya, Tokyo\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-400\">Emotion detected</p>\n            <p className=\"text-pink-400\">💜 Nostalgia</p>\n          </div>\n        </div>\n        \n        <div className=\"bg-black/50 rounded-2xl p-6 mb-6\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <motion.button\n              className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center\"\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n            >\n              <Play className=\"w-6 h-6 text-white ml-1\" />\n            </motion.button>\n            \n            <div className=\"voice-wave\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"bar\" style={{ animationDelay: `${i * 0.1}s` }} />\n              ))}\n            </div>\n            <span className=\"text-gray-400\">Voice memory playing...</span>\n          </div>\n          <p className=\"text-gray-300 italic\">\"I miss the way the cherry blossoms fell like snow...\"</p>\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button className=\"bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-full transition-all\">\n            🔓 Echo This Memory\n          </Button>\n        </div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":2461},"client/src/components/mvp-demo.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MapPin, Mic, Heart, Sparkles, ArrowRight, Volume2, Lock, Unlock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MVPDemoProps {\n  onComplete: () => void;\n}\n\n// Simulated nearby memories for GPS demo\nconst simulatedMemories = [\n  {\n    id: '1',\n    emotion: 'nostalgia',\n    snippet: 'Walking through this park reminds me of childhood summers...',\n    distance: 50,\n    unlocked: false\n  },\n  {\n    id: '2',\n    emotion: 'joy',\n    snippet: 'Had the most amazing coffee here this morning!',\n    distance: 120,\n    unlocked: false\n  },\n  {\n    id: '3',\n    emotion: 'contemplative',\n    snippet: 'Watching the sunset from this bench, thinking about life...',\n    distance: 200,\n    unlocked: false\n  }\n];\n\nexport function MVPDemo({ onComplete }: MVPDemoProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [hasRecorded, setHasRecorded] = useState(false);\n  const [detectedEmotion, setDetectedEmotion] = useState<string | null>(null);\n  const [nearbyMemories, setNearbyMemories] = useState(simulatedMemories);\n  const [unlockedMemories, setUnlockedMemories] = useState<string[]>([]);\n  \n  const { user } = useAuth();\n  const { hasLocation, latitude, longitude } = useGeolocation();\n  const { toast } = useToast();\n\n  // Simulated recording timer\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isRecording) {\n      interval = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isRecording]);\n\n  // Auto-advance when location is enabled\n  useEffect(() => {\n    if (hasLocation && currentStep === 1) {\n      setTimeout(() => setCurrentStep(2), 1500);\n    }\n  }, [hasLocation, currentStep]);\n\n  const emotions = ['joy', 'nostalgia', 'calm', 'excited', 'contemplative', 'hopeful'];\n\n  const handleStartRecording = () => {\n    setIsRecording(true);\n    setRecordingTime(0);\n  };\n\n  const handleStopRecording = () => {\n    setIsRecording(false);\n    \n    // Simulate emotion detection\n    setTimeout(() => {\n      const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n      setDetectedEmotion(randomEmotion);\n      setHasRecorded(true);\n      \n      toast({\n        title: \"Memory Created!\",\n        description: `Emotion detected: ${randomEmotion}`,\n      });\n      \n      setTimeout(() => setCurrentStep(3), 2000);\n    }, 1000);\n  };\n\n  const handleUnlockMemory = (memoryId: string) => {\n    setUnlockedMemories(prev => [...prev, memoryId]);\n    toast({\n      title: \"Memory Unlocked!\",\n      description: \"You can now listen to this emotional echo.\",\n    });\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <motion.div className=\"text-center space-y-6\" initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\n            <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n              <Sparkles className=\"w-10 h-10 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-2\">\n                Welcome to ECHO MVP\n              </h2>\n              <p className=\"text-gray-300\">\n                Experience the 3 core features: GPS unlock, voice posting, and emotion awareness\n              </p>\n            </div>\n            <Button \n              onClick={() => setCurrentStep(1)}\n              className=\"bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600\"\n            >\n              Start Demo\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </motion.div>\n        );\n\n      case 1:\n        return (\n          <motion.div className=\"text-center space-y-6\" initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\n            <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center\">\n              <MapPin className=\"w-10 h-10 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-2\">\n                ✅ GPS-Based Unlock\n              </h2>\n              <p className=\"text-gray-300\">\n                Enabling location to discover nearby emotional memories\n              </p>\n            </div>\n            {hasLocation ? (\n              <motion.div \n                className=\"text-green-400 space-y-3\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n              >\n                <div className=\"flex items-center justify-center gap-2\">\n                  <Sparkles className=\"w-4 h-4\" />\n                  <span>Location enabled!</span>\n                </div>\n                <div className=\"text-sm text-gray-400\">\n                  Found {nearbyMemories.length} memories within 500m\n                </div>\n              </motion.div>\n            ) : (\n              <div className=\"text-yellow-400\">\n                <p>Requesting location access...</p>\n              </div>\n            )}\n          </motion.div>\n        );\n\n      case 2:\n        return (\n          <motion.div className=\"text-center space-y-6\" initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\n            <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center\">\n              <Mic className=\"w-10 h-10 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-2\">\n                ✅ Real-Time Voice Posting\n              </h2>\n              <p className=\"text-gray-300\">\n                Record your emotional memory for others to discover\n              </p>\n            </div>\n            \n            <div className=\"bg-gray-800/50 rounded-lg p-6 space-y-4\">\n              {!isRecording && !hasRecorded && (\n                <Button\n                  onClick={handleStartRecording}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 rounded-full w-16 h-16\"\n                >\n                  <Mic className=\"w-6 h-6\" />\n                </Button>\n              )}\n              \n              {isRecording && (\n                <div className=\"space-y-4\">\n                  <motion.div \n                    className=\"w-3 h-3 bg-red-500 rounded-full mx-auto\"\n                    animate={{ opacity: [1, 0.3, 1] }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div className=\"text-2xl font-mono text-purple-400\">\n                    {formatTime(recordingTime)}\n                  </div>\n                  <Button\n                    onClick={handleStopRecording}\n                    className=\"bg-gray-600 hover:bg-gray-700 rounded-full\"\n                  >\n                    Stop Recording\n                  </Button>\n                </div>\n              )}\n              \n              {hasRecorded && detectedEmotion && (\n                <motion.div \n                  className=\"space-y-3\"\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                >\n                  <div className=\"text-green-400 flex items-center justify-center gap-2\">\n                    <Heart className=\"w-4 h-4\" />\n                    Memory created!\n                  </div>\n                  <div className=\"bg-gradient-to-r from-purple-500/20 to-pink-500/20 border border-purple-500/30 rounded-lg p-4\">\n                    <div className=\"text-xl capitalize text-purple-400 font-bold\">\n                      {detectedEmotion}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">\n                      Emotion detected with 89% confidence\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </div>\n          </motion.div>\n        );\n\n      case 3:\n        return (\n          <motion.div className=\"text-center space-y-6\" initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\n            <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-pink-500 to-rose-500 rounded-full flex items-center justify-center\">\n              <Heart className=\"w-10 h-10 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-2\">\n                ✅ Emotion-Aware Welcome\n              </h2>\n              <p className=\"text-gray-300\">\n                Discover memories that match your emotional state\n              </p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {nearbyMemories.map((memory) => (\n                <Card key={memory.id} className=\"bg-gray-800/70 border-gray-600\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 text-left\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <span className=\"text-xs bg-purple-500/20 text-purple-400 px-2 py-1 rounded-full\">\n                            {memory.emotion}\n                          </span>\n                          <span className=\"text-xs text-gray-400\">\n                            {memory.distance}m away\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-300\">{memory.snippet}</p>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant={unlockedMemories.includes(memory.id) ? \"default\" : \"outline\"}\n                        onClick={() => handleUnlockMemory(memory.id)}\n                        disabled={unlockedMemories.includes(memory.id)}\n                        className=\"ml-3\"\n                      >\n                        {unlockedMemories.includes(memory.id) ? (\n                          <>\n                            <Volume2 className=\"w-3 h-3 mr-1\" />\n                            Play\n                          </>\n                        ) : (\n                          <>\n                            <Unlock className=\"w-3 h-3 mr-1\" />\n                            Unlock\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n            \n            <div className=\"pt-4 space-y-3\">\n              <div className=\"text-green-400 text-sm\">\n                ✓ GPS-based discovery ✓ Voice emotion analysis ✓ Location-aware memories\n              </div>\n              \n              <Button \n                onClick={onComplete}\n                className=\"bg-gradient-to-r from-pink-600 to-rose-500 hover:from-pink-700 hover:to-rose-600\"\n              >\n                Complete MVP Demo\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </motion.div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/95 backdrop-blur-sm z-50 flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-md bg-gray-900/95 border-gray-700\">\n        <CardContent className=\"p-8\">\n          {/* Progress indicator */}\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"flex gap-2\">\n              {[0, 1, 2, 3].map((index) => (\n                <div\n                  key={index}\n                  className={`w-2 h-2 rounded-full transition-colors ${\n                    index <= currentStep ? 'bg-purple-500' : 'bg-gray-600'\n                  }`}\n                />\n              ))}\n            </div>\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            {renderStep()}\n          </AnimatePresence>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12650},"client/src/components/navigation.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { Menu, X, LogIn, UserPlus, LogOut, User } from \"lucide-react\";\nimport { useAuth, useLogout } from \"@/hooks/useAuth\";\nimport { AuthModal } from \"@/components/auth-modal\";\n\nexport default function Navigation() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authTab, setAuthTab] = useState<\"login\" | \"signup\">(\"login\");\n  const { user, isAuthenticated } = useAuth();\n  const logoutMutation = useLogout();\n\n  const openAuthModal = (tab: \"login\" | \"signup\" = \"login\") => {\n    setAuthTab(tab);\n    setShowAuthModal(true);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const navItems = [\n    { href: \"#home\", label: \"Home\" },\n    { href: \"#how-it-works\", label: \"How It Works\" },\n    { href: \"#emotion-map\", label: \"Emotion Map\" },\n    { href: \"#features\", label: \"Features\" },\n  ];\n\n  return (\n    <>\n    <motion.nav\n      className=\"fixed top-0 w-full z-50 glass-morphism\"\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.6 }}\n    >\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <motion.div\n            className=\"text-2xl font-bold gradient-text\"\n            whileHover={{ scale: 1.05 }}\n          >\n            ECHO\n          </motion.div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              <motion.a\n                key={item.href}\n                href={item.href}\n                className=\"hover:text-purple-400 transition-colors\"\n                whileHover={{ y: -2 }}\n              >\n                {item.label}\n              </motion.a>\n            ))}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(!isOpen)}\n            >\n              {isOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </Button>\n          </div>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden md:flex items-center gap-3\">\n            {isAuthenticated ? (\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <User className=\"w-4 h-4 text-purple-400\" />\n                  <span className=\"text-purple-400\">{user?.username}</span>\n                </div>\n                <Button \n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-gray-400 text-gray-400 hover:bg-gray-400 hover:text-white\"\n                  onClick={handleLogout}\n                  disabled={logoutMutation.isPending}\n                >\n                  <LogOut className=\"w-4 h-4 mr-1\" />\n                  {logoutMutation.isPending ? 'Logging out...' : 'Logout'}\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Button \n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white\"\n                  onClick={() => openAuthModal(\"login\")}\n                >\n                  <LogIn className=\"w-4 h-4 mr-1\" />\n                  Login\n                </Button>\n                <Button \n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600\"\n                  onClick={() => openAuthModal(\"signup\")}\n                >\n                  <UserPlus className=\"w-4 h-4 mr-1\" />\n                  Sign Up\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isOpen && (\n          <motion.div\n            className=\"md:hidden mt-4 pb-4 border-t border-white/10\"\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: \"auto\" }}\n            exit={{ opacity: 0, height: 0 }}\n          >\n            <div className=\"flex flex-col space-y-4 mt-4\">\n              {navItems.map((item) => (\n                <a\n                  key={item.href}\n                  href={item.href}\n                  className=\"hover:text-purple-400 transition-colors\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  {item.label}\n                </a>\n              ))}\n              \n              {/* Mobile Auth Buttons */}\n              {isAuthenticated ? (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-purple-400\">\n                    <User className=\"w-4 h-4\" />\n                    <span>Welcome, {user?.username}</span>\n                  </div>\n                  <Button \n                    variant=\"outline\"\n                    className=\"w-full border-gray-400 text-gray-400 hover:bg-gray-400 hover:text-white\"\n                    onClick={() => {\n                      handleLogout();\n                      setIsOpen(false);\n                    }}\n                    disabled={logoutMutation.isPending}\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    {logoutMutation.isPending ? 'Logging out...' : 'Logout'}\n                  </Button>\n                </div>\n              ) : (\n                <>\n                  <Button \n                    variant=\"outline\"\n                    className=\"w-full border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white\"\n                    onClick={() => {\n                      openAuthModal(\"login\");\n                      setIsOpen(false);\n                    }}\n                  >\n                    <LogIn className=\"w-4 h-4 mr-2\" />\n                    Login\n                  </Button>\n                  <Button \n                    className=\"w-full bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600\"\n                    onClick={() => {\n                      openAuthModal(\"signup\");\n                      setIsOpen(false);\n                    }}\n                  >\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Sign Up\n                  </Button>\n                </>\n              )}\n            </div>\n          </motion.div>\n        )}\n      </div>\n    </motion.nav>\n    \n    {/* Authentication Modal */}\n    <AuthModal \n      open={showAuthModal} \n      onOpenChange={setShowAuthModal}\n      defaultTab={authTab}\n    />\n    </>\n  );\n}\n","size_bytes":6775},"client/src/components/voice-memory-recorder.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Mic, Square, Play, Pause, MapPin, Heart, Sparkles, Send } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface VoiceMemoryRecorderProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst emotions = [\n  { name: 'joy', color: '#FFD700', emoji: '😊' },\n  { name: 'nostalgia', color: '#DDA0DD', emoji: '🌅' },\n  { name: 'love', color: '#FF69B4', emoji: '❤️' },\n  { name: 'calm', color: '#87CEEB', emoji: '😌' },\n  { name: 'excitement', color: '#FF4500', emoji: '🎉' },\n  { name: 'contemplative', color: '#9370DB', emoji: '🤔' },\n  { name: 'hopeful', color: '#32CD32', emoji: '🌟' },\n  { name: 'grateful', color: '#FFB6C1', emoji: '🙏' }\n];\n\nexport function VoiceMemoryRecorder({ isOpen, onClose }: VoiceMemoryRecorderProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null);\n  const [detectedEmotion, setDetectedEmotion] = useState<string | null>(null);\n  const [confidence, setConfidence] = useState<number>(0);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);\n\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { hasLocation, latitude, longitude } = useGeolocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Create memory mutation\n  const createMemoryMutation = useMutation({\n    mutationFn: async (memoryData: any) => {\n      return await apiRequest('/api/memories', {\n        method: 'POST',\n        body: memoryData,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Memory Created!\",\n        description: \"Your emotional memory has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/emotions/map'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/memories'] });\n      resetRecorder();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create memory\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (isRecording && intervalRef.current === null) {\n      intervalRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } else if (!isRecording && intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [isRecording]);\n  \n  // Cleanup effect on unmount\n  useEffect(() => {\n    return () => {\n      // Clean up all resources when component unmounts\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (mediaRecorderRef.current) {\n        mediaRecorderRef.current = null;\n      }\n    };\n  }, []);\n\n  const startRecording = async () => {\n    try {\n      console.log('Starting recording...');\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      streamRef.current = stream;\n\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n\n      const chunks: BlobPart[] = [];\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        console.log('Media recorder stopped');\n        const audioBlob = new Blob(chunks, { type: 'audio/wav' });\n        setAudioBlob(audioBlob);\n        setAudioUrl(URL.createObjectURL(audioBlob));\n        processAudioForEmotion(audioBlob);\n        \n        // Stop all media tracks to release microphone\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n          streamRef.current = null;\n        }\n        \n        // Reset media recorder reference after processing\n        setTimeout(() => {\n          mediaRecorderRef.current = null;\n        }, 100);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n      console.log('Recording started, isRecording:', true);\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      toast({\n        title: \"Recording Error\",\n        description: \"Unable to access microphone. Please check permissions.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    console.log('Stop recording called, isRecording:', isRecording);\n    console.log('MediaRecorder ref exists:', !!mediaRecorderRef.current);\n    console.log('MediaRecorder state:', mediaRecorderRef.current?.state);\n    \n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      console.log('Stopping media recorder...');\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      // Clear the timer interval\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      \n      console.log('Recording stopped, isRecording set to false');\n    } else {\n      console.log('Cannot stop recording - recorder state:', mediaRecorderRef.current?.state);\n      // Force stop if we're in recording state but recorder is messed up\n      if (isRecording) {\n        setIsRecording(false);\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n          streamRef.current = null;\n        }\n      }\n    }\n  };\n\n  const playAudio = () => {\n    if (audioUrl && audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n        setIsPlaying(false);\n      } else {\n        audioRef.current.play();\n        setIsPlaying(true);\n      }\n    }\n  };\n\n  const processAudioForEmotion = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n    \n    // Simulate emotion detection processing\n    setTimeout(() => {\n      const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n      const randomConfidence = Math.random() * 0.4 + 0.6; // 60-100% confidence\n      \n      setDetectedEmotion(randomEmotion.name);\n      setSelectedEmotion(randomEmotion.name);\n      setConfidence(randomConfidence);\n      setIsProcessing(false);\n      \n      toast({\n        title: \"Emotion Detected!\",\n        description: `${randomEmotion.emoji} ${randomEmotion.name} detected with ${(randomConfidence * 100).toFixed(0)}% confidence`,\n      });\n    }, 2000);\n  };\n\n  const createMemory = async () => {\n    if (!audioBlob || !title || !hasLocation) {\n      toast({\n        title: \"Incomplete Memory\",\n        description: \"Please provide a title and ensure location is enabled.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Convert audio blob to base64 for storage\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const audioData = reader.result as string;\n      \n      const memoryData = {\n        title,\n        description,\n        content: title, // Use title as content for now\n        emotion: selectedEmotion || detectedEmotion || 'neutral',\n        emotionConfidence: confidence,\n        latitude,\n        longitude,\n        audioData,\n        duration: recordingTime,\n        isActive: 1,\n        accessType: 'public',\n      };\n\n      createMemoryMutation.mutate(memoryData);\n    };\n    \n    reader.readAsDataURL(audioBlob);\n  };\n\n  const resetRecorder = () => {\n    setIsRecording(false);\n    setIsPlaying(false);\n    setRecordingTime(0);\n    setAudioBlob(null);\n    setAudioUrl(null);\n    setDetectedEmotion(null);\n    setSelectedEmotion(null);\n    setConfidence(0);\n    setTitle(\"\");\n    setDescription(\"\");\n    setIsProcessing(false);\n    \n    // Clean up timer interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    \n    // Clean up media recorder and stream\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current = null;\n    }\n    \n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    \n    if (audioRef.current) {\n      audioRef.current.src = \"\";\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.9 }}\n        className=\"w-full max-w-2xl\"\n      >\n        <Card className=\"bg-white border-gray-200 shadow-2xl\">\n          <CardHeader className=\"text-center border-b\">\n            <CardTitle className=\"flex items-center justify-center gap-2 text-2xl text-gray-900\">\n              <Mic className=\"w-6 h-6 text-purple-600\" />\n              Create Voice Memory\n            </CardTitle>\n            <p className=\"text-gray-600 text-sm\">\n              Record your emotional memory and let AI analyze the feeling\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"p-6 space-y-6\">\n            {/* Recording Section */}\n            <div className=\"text-center space-y-4\">\n              <div className=\"relative\">\n                <motion.button\n                  onClick={() => {\n                    console.log('Button clicked, current isRecording:', isRecording);\n                    if (isRecording) {\n                      stopRecording();\n                    } else {\n                      startRecording();\n                    }\n                  }}\n                  className={`w-24 h-24 rounded-full flex items-center justify-center text-white text-2xl shadow-lg transition-all ${\n                    isRecording \n                      ? 'bg-red-500 hover:bg-red-600' \n                      : 'bg-purple-600 hover:bg-purple-700'\n                  }`}\n                  whileTap={{ scale: 0.95 }}\n                  animate={isRecording ? { scale: [1, 1.05, 1] } : {}}\n                  transition={isRecording ? { repeat: Infinity, duration: 1 } : {}}\n                >\n                  {isRecording ? <Square className=\"w-8 h-8\" fill=\"white\" /> : <Mic className=\"w-8 h-8\" />}\n                  {/* Debug indicator */}\n                  <span className=\"absolute -bottom-8 text-xs text-black\">\n                    {isRecording ? 'STOP' : 'START'}\n                  </span>\n                </motion.button>\n                \n                {isRecording && (\n                  <motion.div\n                    className=\"absolute -inset-4 border-4 border-red-500 rounded-full\"\n                    animate={{ opacity: [0.3, 0.8, 0.3] }}\n                    transition={{ repeat: Infinity, duration: 1.5 }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"text-lg font-mono text-gray-700\">\n                {formatTime(recordingTime)}\n              </div>\n              \n              {isRecording && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  className=\"flex items-center justify-center gap-2 text-red-600\"\n                >\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n                  <span className=\"text-sm font-medium\">Recording...</span>\n                </motion.div>\n              )}\n            </div>\n\n            {/* Audio Playback */}\n            {audioUrl && (\n              <div className=\"flex items-center justify-center gap-4 p-4 bg-gray-50 rounded-lg\">\n                <Button\n                  onClick={playAudio}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                >\n                  {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                  {isPlaying ? 'Pause' : 'Play'} Recording\n                </Button>\n                \n                <audio\n                  ref={audioRef}\n                  src={audioUrl}\n                  onEnded={() => setIsPlaying(false)}\n                  className=\"hidden\"\n                />\n              </div>\n            )}\n\n            {/* Emotion Detection */}\n            <AnimatePresence>\n              {(isProcessing || detectedEmotion) && (\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200\"\n                >\n                  {isProcessing ? (\n                    <div className=\"flex items-center justify-center gap-3\">\n                      <Sparkles className=\"w-5 h-5 text-purple-600 animate-spin\" />\n                      <span className=\"text-purple-800 font-medium\">Analyzing emotion...</span>\n                    </div>\n                  ) : (\n                    <div className=\"text-center space-y-3\">\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <Heart className=\"w-5 h-5 text-purple-600\" />\n                        <span className=\"text-purple-800 font-semibold\">Emotion Detected</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-center gap-2\">\n                        <span className=\"text-2xl\">\n                          {emotions.find(e => e.name === detectedEmotion)?.emoji}\n                        </span>\n                        <span className=\"text-lg font-bold capitalize text-gray-900\">\n                          {detectedEmotion}\n                        </span>\n                        <span className=\"text-sm text-gray-600\">\n                          ({(confidence * 100).toFixed(0)}% confidence)\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* Emotion Selection */}\n            {detectedEmotion && (\n              <div className=\"space-y-3\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  Adjust emotion if needed:\n                </label>\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {emotions.map((emotion) => (\n                    <button\n                      key={emotion.name}\n                      onClick={() => setSelectedEmotion(emotion.name)}\n                      className={`p-3 rounded-lg border transition-all ${\n                        selectedEmotion === emotion.name\n                          ? 'border-purple-500 bg-purple-50 ring-2 ring-purple-200'\n                          : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"text-lg mb-1\">{emotion.emoji}</div>\n                      <div className=\"text-xs capitalize font-medium\">{emotion.name}</div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Memory Details */}\n            {audioBlob && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Memory Title *\n                  </label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Give your memory a title...\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Description (optional)\n                  </label>\n                  <Textarea\n                    placeholder=\"Add context about this memory...\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    rows={3}\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                {hasLocation && (\n                  <div className=\"flex items-center gap-2 text-sm text-gray-600 p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <MapPin className=\"w-4 h-4 text-green-600\" />\n                    <span>Location will be saved with this memory</span>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-3 pt-4 border-t\">\n              <Button\n                onClick={onClose}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              \n              {audioBlob && (\n                <Button\n                  onClick={resetRecorder}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  Start Over\n                </Button>\n              )}\n              \n              {audioBlob && title && (\n                <Button\n                  onClick={createMemory}\n                  disabled={createMemoryMutation.isPending}\n                  className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                >\n                  {createMemoryMutation.isPending ? (\n                    <span className=\"flex items-center gap-2\">\n                      <Sparkles className=\"w-4 h-4 animate-spin\" />\n                      Creating...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center gap-2\">\n                      <Send className=\"w-4 h-4\" />\n                      Create Memory\n                    </span>\n                  )}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":19585},"client/src/components/voice-recorder.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mic, Square, Play, Pause } from \"lucide-react\";\nimport { useVoiceRecording } from \"@/hooks/use-voice-recording\";\n\nexport default function VoiceRecorder() {\n  const {\n    isRecording,\n    isPlaying,\n    audioBlob,\n    startRecording,\n    stopRecording,\n    playRecording,\n    pauseRecording,\n  } = useVoiceRecording();\n\n  const [emotion, setEmotion] = useState<string | null>(null);\n\n  const handleStartRecording = async () => {\n    try {\n      await startRecording();\n      setEmotion(null);\n    } catch (error) {\n      console.error(\"Failed to start recording:\", error);\n    }\n  };\n\n  const handleStopRecording = () => {\n    stopRecording();\n    // Simulate emotion detection\n    const emotions = [\"nostalgia\", \"love\", \"peace\", \"joy\", \"warmth\"];\n    const detectedEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n    setEmotion(detectedEmotion);\n  };\n\n  const emotionColors = {\n    nostalgia: \"text-purple-400\",\n    love: \"text-pink-400\",\n    peace: \"text-cyan-400\",\n    joy: \"text-yellow-400\",\n    warmth: \"text-orange-400\",\n  };\n\n  const emotionEmojis = {\n    nostalgia: \"💜\",\n    love: \"❤️\",\n    peace: \"😌\",\n    joy: \"✨\",\n    warmth: \"💕\",\n  };\n\n  return (\n    <div className=\"glass-morphism rounded-2xl p-6\">\n      <div className=\"flex items-center gap-4 mb-4\">\n        <motion.div\n          className={`w-16 h-16 rounded-full flex items-center justify-center ${\n            isRecording\n              ? \"bg-gradient-to-r from-red-500 to-red-600\"\n              : \"bg-gradient-to-r from-pink-500 to-yellow-400\"\n          }`}\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n        >\n          <Mic className=\"w-8 h-8 text-white\" />\n        </motion.div>\n        <div>\n          <p className=\"text-white font-medium\">\n            {isRecording ? \"Recording...\" : \"Tap to record\"}\n          </p>\n          <p className=\"text-gray-400 text-sm\">Share your emotion</p>\n        </div>\n      </div>\n\n      {/* Voice wave visualization */}\n      {isRecording && (\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"voice-wave\">\n            {[...Array(7)].map((_, i) => (\n              <div key={i} className=\"bar\" style={{ animationDelay: `${i * 0.1}s` }} />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Recording controls */}\n      <div className=\"flex justify-center gap-4 mb-4\">\n        {!isRecording ? (\n          <Button\n            onClick={handleStartRecording}\n            className=\"bg-gradient-to-r from-pink-500 to-red-500 hover:from-pink-600 hover:to-red-600\"\n          >\n            <Mic className=\"w-4 h-4 mr-2\" />\n            Start Recording\n          </Button>\n        ) : (\n          <Button\n            onClick={handleStopRecording}\n            variant=\"destructive\"\n          >\n            <Square className=\"w-4 h-4 mr-2\" />\n            Stop Recording\n          </Button>\n        )}\n\n        {audioBlob && !isRecording && (\n          <Button\n            onClick={isPlaying ? pauseRecording : playRecording}\n            variant=\"outline\"\n          >\n            {isPlaying ? (\n              <Pause className=\"w-4 h-4 mr-2\" />\n            ) : (\n              <Play className=\"w-4 h-4 mr-2\" />\n            )}\n            {isPlaying ? \"Pause\" : \"Play\"}\n          </Button>\n        )}\n      </div>\n\n      {/* Emotion detection result */}\n      {emotion && (\n        <motion.div\n          className=\"text-center\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <p className=\"text-gray-400 text-sm mb-1\">Emotion detected:</p>\n          <p className={`font-medium ${emotionColors[emotion as keyof typeof emotionColors]}`}>\n            {emotionEmojis[emotion as keyof typeof emotionEmojis]} {emotion}\n          </p>\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4004},"client/src/hooks/use-geolocation.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface GeolocationState {\n  latitude: number | null;\n  longitude: number | null;\n  accuracy: number | null;\n  error: string | null;\n  isLoading: boolean;\n  isSupported: boolean;\n}\n\nexport function useGeolocation() {\n  const [state, setState] = useState<GeolocationState>({\n    latitude: null,\n    longitude: null,\n    accuracy: null,\n    error: null,\n    isLoading: false,\n    isSupported: typeof navigator !== 'undefined' && 'geolocation' in navigator,\n  });\n\n  const getCurrentPosition = () => {\n    if (!state.isSupported) {\n      setState(prev => ({\n        ...prev,\n        error: 'Geolocation is not supported by this browser',\n      }));\n      return;\n    }\n\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n          error: null,\n          isLoading: false,\n          isSupported: true,\n        });\n      },\n      (error) => {\n        let errorMessage = 'Unable to retrieve location';\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'Location access denied. Please enable location permissions.';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information unavailable.';\n            break;\n          case error.TIMEOUT:\n            errorMessage = 'Location request timed out.';\n            break;\n        }\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 15000,\n        maximumAge: 300000, // 5 minutes\n      }\n    );\n  };\n\n  useEffect(() => {\n    // Auto-request location on mount\n    getCurrentPosition();\n  }, []);\n\n  return {\n    ...state,\n    getCurrentPosition,\n    hasLocation: state.latitude !== null && state.longitude !== null,\n  };\n}","size_bytes":2086},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-voice-recording.ts":{"content":"import { useState, useRef, useCallback } from \"react\";\n\nexport function useVoiceRecording() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const mediaRecorder = useRef<MediaRecorder | null>(null);\n  const audioPlayer = useRef<HTMLAudioElement | null>(null);\n  const chunks = useRef<Blob[]>([]);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      mediaRecorder.current = new MediaRecorder(stream);\n      chunks.current = [];\n\n      mediaRecorder.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.current.onstop = () => {\n        const blob = new Blob(chunks.current, { type: \"audio/webm\" });\n        setAudioBlob(blob);\n        \n        // Stop all tracks to free up the microphone\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorder.current.start();\n      setIsRecording(true);\n      setError(null);\n    } catch (err) {\n      setError(\"Failed to access microphone. Please check permissions.\");\n      console.error(\"Error accessing microphone:\", err);\n    }\n  }, []);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorder.current && isRecording) {\n      mediaRecorder.current.stop();\n      setIsRecording(false);\n    }\n  }, [isRecording]);\n\n  const playRecording = useCallback(() => {\n    if (audioBlob) {\n      const url = URL.createObjectURL(audioBlob);\n      audioPlayer.current = new Audio(url);\n      \n      audioPlayer.current.onended = () => {\n        setIsPlaying(false);\n        URL.revokeObjectURL(url);\n      };\n\n      audioPlayer.current.play();\n      setIsPlaying(true);\n    }\n  }, [audioBlob]);\n\n  const pauseRecording = useCallback(() => {\n    if (audioPlayer.current) {\n      audioPlayer.current.pause();\n      setIsPlaying(false);\n    }\n  }, []);\n\n  return {\n    isRecording,\n    isPlaying,\n    audioBlob,\n    error,\n    startRecording,\n    stopRecording,\n    playRecording,\n    pauseRecording,\n  };\n}\n","size_bytes":2272},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest, getQueryFn } from \"@/lib/queryClient\";\nimport { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n  });\n\n  // If we get a 401, user is not authenticated\n  const isAuthenticated = !!user && !error;\n  \n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    error\n  };\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      return apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: credentials\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/auth/me\"], data.user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    }\n  });\n}\n\nexport function useSignup() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (userData: { username: string; email: string; password: string }) => {\n      return apiRequest(\"/api/auth/signup\", {\n        method: \"POST\",\n        body: userData\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/auth/me\"], data.user);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    }\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"/api/auth/logout\", { method: \"POST\" });\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.invalidateQueries();\n    }\n  });\n}","size_bytes":1935},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method?: string;\n    body?: unknown;\n  } = {}\n): Promise<any> {\n  const { method = \"GET\", body } = options;\n  \n  const res = await fetch(url, {\n    method,\n    headers: body ? { \"Content-Type\": \"application/json\" } : {},\n    body: body ? JSON.stringify(body) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1447},"client/src/lib/three-utils.ts":{"content":"// Utility functions for Three.js globe rendering\nexport function createSphereGeometry(radius: number = 1, widthSegments: number = 32, heightSegments: number = 16) {\n  return {\n    radius,\n    widthSegments,\n    heightSegments,\n  };\n}\n\nexport function latLngToVector3(lat: number, lng: number, radius: number = 1) {\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (lng + 180) * (Math.PI / 180);\n  \n  const x = -(radius * Math.sin(phi) * Math.cos(theta));\n  const z = radius * Math.sin(phi) * Math.sin(theta);\n  const y = radius * Math.cos(phi);\n  \n  return { x, y, z };\n}\n\nexport function calculateGlobeRotation(mouseX: number, mouseY: number, sensitivity: number = 0.005) {\n  return {\n    rotationY: mouseX * sensitivity,\n    rotationX: mouseY * sensitivity,\n  };\n}\n\nexport function createEmotionColorMapping() {\n  return {\n    nostalgia: '#a855f7', // purple-500\n    love: '#f472b6',      // pink-400\n    peace: '#22d3ee',     // cyan-400\n    joy: '#facc15',       // yellow-400\n    warmth: '#fb923c',    // orange-400\n  };\n}\n\nexport function animateMemoryPulse(time: number) {\n  return {\n    scale: 1 + Math.sin(time * 0.002) * 0.3,\n    opacity: 0.5 + Math.sin(time * 0.001) * 0.3,\n  };\n}\n","size_bytes":1204},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/contact.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowLeft, Mail, MapPin, Clock, Twitter, Github, Linkedin } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const { toast } = useToast();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.name && formData.email && formData.message) {\n      toast({\n        title: \"Message sent! 💜\",\n        description: \"We'll respond to your message within 24 hours.\",\n      });\n      setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-950 to-black text-white\">\n      <div className=\"container mx-auto px-6 py-20\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-8 text-purple-400 hover:text-purple-300\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-pink-500 to-yellow-400 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Mail className=\"w-10 h-10 text-white\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-light mb-4\">\n                Contact <span className=\"gradient-text\">Us</span>\n              </h1>\n              <p className=\"text-xl text-gray-400\">\n                Let's start a conversation about emotions and connections\n              </p>\n            </div>\n\n            <div className=\"grid lg:grid-cols-2 gap-12\">\n              {/* Contact Information */}\n              <motion.div\n                initial={{ opacity: 0, x: -30 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: 0.2 }}\n              >\n                <div className=\"glass-morphism rounded-3xl p-8\">\n                  <h2 className=\"text-2xl font-semibold mb-6\">Get in Touch</h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-purple-600 to-purple-400 rounded-full flex items-center justify-center\">\n                        <Mail className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Email</p>\n                        <p className=\"text-gray-400\">hello@echo.app</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-cyan-500 to-emerald-400 rounded-full flex items-center justify-center\">\n                        <MapPin className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Location</p>\n                        <p className=\"text-gray-400\">San Francisco, CA</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-pink-500 to-yellow-400 rounded-full flex items-center justify-center\">\n                        <Clock className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Response Time</p>\n                        <p className=\"text-gray-400\">Within 24 hours</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-8 pt-6 border-t border-white/10\">\n                    <h3 className=\"text-lg font-medium mb-4\">Follow Our Journey</h3>\n                    <div className=\"flex gap-4\">\n                      {[\n                        { icon: Twitter, label: \"Twitter\", color: \"from-blue-500 to-blue-400\" },\n                        { icon: Github, label: \"GitHub\", color: \"from-gray-600 to-gray-500\" },\n                        { icon: Linkedin, label: \"LinkedIn\", color: \"from-blue-600 to-blue-500\" }\n                      ].map((social) => (\n                        <motion.a\n                          key={social.label}\n                          href=\"#\"\n                          className={`w-10 h-10 bg-gradient-to-r ${social.color} rounded-full flex items-center justify-center hover:scale-110 transition-transform`}\n                          whileHover={{ scale: 1.1 }}\n                          whileTap={{ scale: 0.95 }}\n                        >\n                          <social.icon className=\"w-5 h-5 text-white\" />\n                        </motion.a>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Contact Form */}\n              <motion.div\n                initial={{ opacity: 0, x: 30 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: 0.4 }}\n              >\n                <div className=\"glass-morphism rounded-3xl p-8\">\n                  <h2 className=\"text-2xl font-semibold mb-6\">Send us a Message</h2>\n                  \n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Input\n                          name=\"name\"\n                          placeholder=\"Your name\"\n                          value={formData.name}\n                          onChange={handleChange}\n                          className=\"bg-white/5 border-white/20 text-white placeholder-gray-400\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Input\n                          name=\"email\"\n                          type=\"email\"\n                          placeholder=\"Your email\"\n                          value={formData.email}\n                          onChange={handleChange}\n                          className=\"bg-white/5 border-white/20 text-white placeholder-gray-400\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Input\n                        name=\"subject\"\n                        placeholder=\"Subject\"\n                        value={formData.subject}\n                        onChange={handleChange}\n                        className=\"bg-white/5 border-white/20 text-white placeholder-gray-400\"\n                      />\n                    </div>\n\n                    <div>\n                      <textarea\n                        name=\"message\"\n                        placeholder=\"Your message...\"\n                        value={formData.message}\n                        onChange={handleChange}\n                        className=\"w-full h-32 bg-white/5 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 resize-none focus:outline-none focus:border-purple-400\"\n                        required\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600 py-4 text-lg\"\n                    >\n                      Send Message\n                    </Button>\n                  </form>\n                </div>\n              </motion.div>\n            </div>\n\n            {/* Additional Info */}\n            <motion.div\n              className=\"mt-12 text-center\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.6 }}\n            >\n              <div className=\"glass-morphism rounded-2xl p-6\">\n                <h3 className=\"text-lg font-medium mb-2\">Partnership & Media Inquiries</h3>\n                <p className=\"text-gray-400 mb-4\">\n                  Interested in partnering with ECHO or covering our story?\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <a href=\"mailto:partnerships@echo.app\" className=\"text-purple-400 hover:text-purple-300\">\n                    partnerships@echo.app\n                  </a>\n                  <span className=\"hidden sm:inline text-gray-600\">|</span>\n                  <a href=\"mailto:press@echo.app\" className=\"text-cyan-400 hover:text-cyan-300\">\n                    press@echo.app\n                  </a>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":9463},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useGeolocation } from \"@/hooks/use-geolocation\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { VoiceMemoryRecorder } from \"@/components/voice-memory-recorder\";\nimport { \n  Bell, \n  User, \n  Plus, \n  MapPin, \n  Heart, \n  Volume2, \n  Play, \n  Pause, \n  Unlock,\n  Filter,\n  Compass,\n  Clock,\n  Users,\n  MessageCircle,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Add line-clamp utility if not available\ndeclare module 'react' {\n  interface CSSProperties {\n    'line-clamp'?: number;\n  }\n}\n\ninterface Memory {\n  id: string;\n  title: string;\n  description?: string;\n  content: string;\n  audioData?: string;\n  emotion: string;\n  emotionConfidence: number;\n  latitude: number;\n  longitude: number;\n  locationName?: string;\n  duration: number;\n  unlockCount: number;\n  createdAt: string;\n  userId: string;\n  distance?: number;\n}\n\nconst emotionColors = {\n  joy: \"from-amber-400 to-yellow-500\",\n  love: \"from-pink-400 to-rose-500\", \n  nostalgia: \"from-purple-400 to-indigo-500\",\n  peace: \"from-teal-400 to-cyan-500\",\n  excitement: \"from-orange-400 to-red-500\",\n  calm: \"from-blue-400 to-sky-500\",\n  grateful: \"from-green-400 to-emerald-500\",\n  contemplative: \"from-violet-400 to-purple-500\",\n  hopeful: \"from-lime-400 to-green-500\"\n};\n\nconst emotionEmojis = {\n  joy: \"😊\",\n  love: \"💕\", \n  nostalgia: \"😌\",\n  peace: \"🕊️\",\n  excitement: \"⚡\",\n  calm: \"🌊\",\n  grateful: \"🙏\",\n  contemplative: \"🤔\",\n  hopeful: \"🌟\"\n};\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { hasLocation, latitude, longitude } = useGeolocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showVoiceRecorder, setShowVoiceRecorder] = useState(false);\n  const [selectedEmotion, setSelectedEmotion] = useState<string | null>(null);\n  const [playingAudio, setPlayingAudio] = useState<string | null>(null);\n  const [selectedMemory, setSelectedMemory] = useState<Memory | null>(null);\n  const [showMemoryModal, setShowMemoryModal] = useState(false);\n  \n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  // Fetch nearby memories based on user location\n  const { data: nearbyMemories, isLoading: loadingMemories } = useQuery({\n    queryKey: ['/api/memories/nearby', latitude, longitude],\n    enabled: hasLocation && !!latitude && !!longitude,\n  }) as { data: { data: Memory[] } | undefined, isLoading: boolean };\n\n  // Fetch user's unlocked memories (vault preview)\n  const { data: userMemories } = useQuery({\n    queryKey: ['/api/memories/user'],\n  }) as { data: { memories: Memory[] } | undefined };\n\n  // Calculate distance from user to memory\n  const calculateDistance = (memoryLat: number, memoryLng: number): number => {\n    if (!latitude || !longitude) return 0;\n    \n    const R = 6371; // Earth's radius in km\n    const dLat = (memoryLat - latitude) * Math.PI / 180;\n    const dLng = (memoryLng - longitude) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(latitude * Math.PI / 180) * Math.cos(memoryLat * Math.PI / 180) *\n              Math.sin(dLng/2) * Math.sin(dLng/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  };\n\n  // Play audio memory\n  const playAudio = (memory: Memory) => {\n    if (!memory.audioData) return;\n    \n    if (playingAudio === memory.id) {\n      setPlayingAudio(null);\n      if (audioRef.current) {\n        audioRef.current.pause();\n      }\n      return;\n    }\n    \n    if (audioRef.current) {\n      audioRef.current.src = memory.audioData;\n      audioRef.current.play().catch(console.error);\n      setPlayingAudio(memory.id);\n    }\n  };\n\n  // Unlock memory mutation\n  const unlockMemoryMutation = useMutation({\n    mutationFn: async (memoryId: string) => {\n      return await apiRequest(`/api/memories/${memoryId}/unlock`, {\n        method: 'POST',\n        body: {}\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Memory Unlocked!\",\n        description: \"This emotional echo is now in your vault.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/memories'] });\n    }\n  });\n\n  // Filter memories by emotion\n  const filteredMemories = selectedEmotion \n    ? nearbyMemories?.data?.filter(memory => memory.emotion === selectedEmotion)\n    : nearbyMemories?.data;\n\n  // Add distance to memories\n  const memoriesWithDistance = filteredMemories?.map(memory => ({\n    ...memory,\n    distance: calculateDistance(memory.latitude, memory.longitude)\n  })).sort((a, b) => (a.distance || 0) - (b.distance || 0));\n\n  const openMemoryModal = (memory: Memory) => {\n    setSelectedMemory(memory);\n    setShowMemoryModal(true);\n  };\n\n  const formatDistance = (distance: number): string => {\n    if (distance < 1) return `${Math.round(distance * 1000)}m away`;\n    return `${distance.toFixed(1)}km away`;\n  };\n\n  const formatTimeAgo = (dateString: string): string => {\n    const now = new Date();\n    const created = new Date(dateString);\n    const diffMs = now.getTime() - created.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${diffDays}d ago`;\n  };\n\n  const uniqueEmotions = Array.from(\n    new Set(nearbyMemories?.data?.map((m: Memory) => m.emotion) || [])\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-purple-950/20 to-black text-white\">\n      {/* Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-40 bg-black/20 backdrop-blur-xl border-b border-white/10\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <motion.h1 \n            className=\"text-2xl font-light bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n          >\n            ECHO\n          </motion.h1>\n          \n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n              <Bell className=\"w-5 h-5\" />\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-pink-500 rounded-full\"></div>\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <User className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"pt-20 px-6\">\n        {/* Welcome Section */}\n        <motion.div \n          className=\"text-center mb-8\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n        >\n          <h2 className=\"text-3xl font-light mb-2\">\n            Welcome back, <span className=\"text-purple-400\">{user?.username}</span>\n          </h2>\n          <p className=\"text-gray-400\">\n            {hasLocation \n              ? `${memoriesWithDistance?.length || 0} emotional echoes discovered nearby`\n              : 'Enable location to discover memories around you'\n            }\n          </p>\n        </motion.div>\n\n        {/* Emotion Filter */}\n        <motion.div \n          className=\"mb-6\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <h3 className=\"text-lg font-medium mb-3 flex items-center gap-2\">\n            <Filter className=\"w-5 h-5 text-purple-400\" />\n            Filter by Emotion\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant={selectedEmotion === null ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedEmotion(null)}\n              className=\"rounded-full\"\n            >\n              All\n            </Button>\n            {uniqueEmotions.map((emotion: string) => (\n              <Button\n                key={emotion}\n                variant={selectedEmotion === emotion ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedEmotion(emotion)}\n                className={`rounded-full ${\n                  selectedEmotion === emotion \n                    ? `bg-gradient-to-r ${emotionColors[emotion as keyof typeof emotionColors]} text-white` \n                    : ''\n                }`}\n              >\n                {emotionEmojis[emotion as keyof typeof emotionEmojis]} {emotion}\n              </Button>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Nearby Memories Grid */}\n        <motion.div \n          className=\"mb-8\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          <h3 className=\"text-xl font-medium mb-4 flex items-center gap-2\">\n            <Compass className=\"w-5 h-5 text-purple-400\" />\n            Sleeping Memories Nearby\n          </h3>\n          \n          {loadingMemories ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-48 bg-white/5 rounded-xl animate-pulse\"></div>\n              ))}\n            </div>\n          ) : memoriesWithDistance && memoriesWithDistance.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {memoriesWithDistance.map((memory: Memory, index: number) => (\n                <motion.div\n                  key={memory.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card \n                    className=\"bg-white/5 border-white/10 hover:bg-white/10 transition-all cursor-pointer group relative overflow-hidden\"\n                    onClick={() => openMemoryModal(memory)}\n                  >\n                    {/* Emotion glow effect */}\n                    <div className={`absolute inset-0 bg-gradient-to-br ${emotionColors[memory.emotion as keyof typeof emotionColors]} opacity-20 group-hover:opacity-30 transition-opacity`}></div>\n                    \n                    <CardHeader className=\"relative\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-3 h-3 rounded-full bg-gradient-to-r ${emotionColors[memory.emotion as keyof typeof emotionColors]} animate-pulse`}></div>\n                          <span className=\"text-xs text-gray-400 capitalize\">{memory.emotion}</span>\n                        </div>\n                        <MoreHorizontal className=\"w-4 h-4 text-gray-500\" />\n                      </div>\n                      <CardTitle className=\"text-lg font-medium\">{memory.title}</CardTitle>\n                    </CardHeader>\n                    \n                    <CardContent className=\"relative\">\n                      <p className=\"text-gray-300 text-sm mb-4 overflow-hidden text-ellipsis\" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>\n                        {memory.description || \"Someone left an emotional memory here...\"}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between text-xs text-gray-400 mb-3\">\n                        <div className=\"flex items-center gap-1\">\n                          <MapPin className=\"w-3 h-3\" />\n                          {memory.distance ? formatDistance(memory.distance) : 'Unknown distance'}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          {formatTimeAgo(memory.createdAt)}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {memory.audioData && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                playAudio(memory);\n                              }}\n                              className=\"p-1 hover:bg-white/20\"\n                            >\n                              {playingAudio === memory.id ? \n                                <Pause className=\"w-4 h-4\" /> : \n                                <Play className=\"w-4 h-4\" />\n                              }\n                            </Button>\n                          )}\n                          <span className=\"text-xs text-gray-400\">\n                            {memory.duration}s\n                          </span>\n                        </div>\n                        \n                        <Button\n                          size=\"sm\"\n                          className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            unlockMemoryMutation.mutate(memory.id);\n                          }}\n                        >\n                          <Unlock className=\"w-3 h-3 mr-1\" />\n                          Unlock\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"bg-white/5 border-white/10 text-center py-12\">\n              <CardContent>\n                <MapPin className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No memories nearby</h3>\n                <p className=\"text-gray-400 mb-4\">\n                  {hasLocation \n                    ? 'Be the first to leave an emotional echo in this area'\n                    : 'Enable location services to discover memories around you'\n                  }\n                </p>\n                <Button \n                  onClick={() => setShowVoiceRecorder(true)}\n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create First Memory\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </motion.div>\n\n        {/* Your Vault Preview */}\n        <motion.div \n          className=\"mb-8\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n        >\n          <h3 className=\"text-xl font-medium mb-4 flex items-center gap-2\">\n            <Heart className=\"w-5 h-5 text-pink-400\" />\n            Your Emotional Vault\n          </h3>\n          \n          {userMemories?.data?.memories && userMemories.data.memories.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {userMemories.data.memories.slice(0, 3).map((memory: Memory, index: number) => (\n                <motion.div\n                  key={memory.id}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card className=\"bg-white/5 border-white/10 hover:bg-white/10 transition-all cursor-pointer\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <div className={`w-2 h-2 rounded-full bg-gradient-to-r ${emotionColors[memory.emotion as keyof typeof emotionColors]}`}></div>\n                        <span className=\"text-xs text-gray-400 capitalize\">{memory.emotion}</span>\n                      </div>\n                      <h4 className=\"font-medium mb-1\">{memory.title}</h4>\n                      <p className=\"text-sm text-gray-400 overflow-hidden text-ellipsis\" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}>{memory.description}</p>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"bg-white/5 border-white/10 text-center py-8\">\n              <CardContent>\n                <Heart className=\"w-8 h-8 text-gray-500 mx-auto mb-3\" />\n                <p className=\"text-gray-400\">Your vault is empty. Start unlocking memories!</p>\n              </CardContent>\n            </Card>\n          )}\n        </motion.div>\n      </main>\n\n      {/* Floating Action Button */}\n      <motion.div \n        className=\"fixed bottom-8 right-8 z-30\"\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ delay: 0.8, type: \"spring\" }}\n      >\n        <Button\n          size=\"lg\"\n          onClick={() => setShowVoiceRecorder(true)}\n          className=\"w-16 h-16 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 shadow-2xl hover:shadow-purple-500/25 transition-all\"\n        >\n          <Plus className=\"w-8 h-8\" />\n        </Button>\n      </motion.div>\n\n      {/* Voice Memory Recorder */}\n      <VoiceMemoryRecorder \n        isOpen={showVoiceRecorder}\n        onClose={() => setShowVoiceRecorder(false)}\n      />\n\n      {/* Memory Detail Modal */}\n      <AnimatePresence>\n        {showMemoryModal && selectedMemory && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4\"\n            onClick={() => setShowMemoryModal(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-gray-900 rounded-2xl p-6 max-w-md w-full\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className={`w-4 h-4 rounded-full bg-gradient-to-r ${emotionColors[selectedMemory.emotion as keyof typeof emotionColors]} animate-pulse`}></div>\n                  <span className=\"text-sm text-gray-400 capitalize\">{selectedMemory.emotion}</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowMemoryModal(false)}\n                >\n                  ✕\n                </Button>\n              </div>\n              \n              <h3 className=\"text-xl font-medium mb-2\">{selectedMemory.title}</h3>\n              <p className=\"text-gray-300 mb-4\">{selectedMemory.description}</p>\n              \n              <div className=\"flex items-center justify-between text-sm text-gray-400 mb-6\">\n                <div className=\"flex items-center gap-1\">\n                  <MapPin className=\"w-4 h-4\" />\n                  {selectedMemory.distance ? formatDistance(selectedMemory.distance) : 'Unknown distance'}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  {formatTimeAgo(selectedMemory.createdAt)}\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => playAudio(selectedMemory)}\n                  disabled={!selectedMemory.audioData}\n                >\n                  <Volume2 className=\"w-4 h-4 mr-2\" />\n                  Listen\n                </Button>\n                <Button\n                  className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n                  onClick={() => {\n                    unlockMemoryMutation.mutate(selectedMemory.id);\n                    setShowMemoryModal(false);\n                  }}\n                >\n                  <Unlock className=\"w-4 h-4 mr-2\" />\n                  Unlock & Echo\n                </Button>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Hidden Audio Element */}\n      <audio\n        ref={audioRef}\n        onEnded={() => setPlayingAudio(null)}\n        onError={() => setPlayingAudio(null)}\n      />\n    </div>\n  );\n}","size_bytes":21288},"client/src/pages/home.tsx":{"content":"import { motion, useScroll, useTransform } from \"framer-motion\";\nimport { useRef, useState } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport HeroGlobe from \"@/components/hero-globe\";\nimport EmotionMap from \"@/components/emotion-map\";\nimport VoiceRecorder from \"@/components/voice-recorder\";\nimport MemoryCard from \"@/components/memory-card\";\nimport FeatureShowcase from \"@/components/feature-showcase\";\nimport { AuthModal } from \"@/components/auth-modal\";\nimport { MVPDemo } from \"@/components/mvp-demo\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth, useLogout } from \"@/hooks/useAuth\";\nimport { ChevronDown, Heart, MapPin, Brain, Shield, Link2, Archive, Mic2, Users, Globe, LogOut, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { VoiceMemoryRecorder } from \"@/components/voice-memory-recorder\";\n\nconst emotionColors = {\n  nostalgia: \"from-purple-600 to-purple-400\",\n  love: \"from-pink-500 to-yellow-400\",\n  peace: \"from-cyan-500 to-emerald-400\",\n  joy: \"from-yellow-400 to-orange-400\",\n  warmth: \"from-orange-400 to-red-400\",\n};\n\nexport default function Home() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start start\", \"end start\"]\n  });\n\n  const heroY = useTransform(scrollYProgress, [0, 1], [\"0%\", \"50%\"]);\n  const heroOpacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);\n\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [authTab, setAuthTab] = useState<\"login\" | \"signup\">(\"login\");\n  const [showVoiceRecorder, setShowVoiceRecorder] = useState(false);\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const logoutMutation = useLogout();\n  const { toast } = useToast();\n\n  // Fetch global emotion map data\n  const { data: emotionMapData } = useQuery({\n    queryKey: [\"/api/emotions/map\"],\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const openAuthModal = (tab: \"login\" | \"signup\" = \"login\") => {\n    setAuthTab(tab);\n    setShowAuthModal(true);\n  };\n\n  const handleOnboardingComplete = () => {\n    // Mark user as having completed onboarding\n    // This would typically update the user's onboarding status in the backend\n    window.location.reload(); // Refresh to show the full app\n  };\n\n  // Show MVP demo for new authenticated users\n  if (isAuthenticated && user && !user.hasCompletedOnboarding) {\n    return <MVPDemo onComplete={handleOnboardingComplete} />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"min-h-screen bg-gradient-to-b from-slate-950 to-black text-white overflow-x-hidden\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <motion.section \n        id=\"home\" \n        className=\"min-h-screen flex items-center justify-center relative parallax-container\"\n        style={{ y: heroY, opacity: heroOpacity }}\n      >\n        {/* Background particles */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          {[...Array(6)].map((_, i) => (\n            <motion.div\n              key={i}\n              className={`absolute w-1 h-1 rounded-full ${\n                i % 3 === 0 ? 'bg-purple-400' : i % 3 === 1 ? 'bg-pink-400' : 'bg-cyan-400'\n              }`}\n              style={{\n                top: `${20 + (i * 15)}%`,\n                left: `${10 + (i * 15)}%`,\n              }}\n              animate={{\n                opacity: [0.3, 1, 0.3],\n                scale: [1, 1.5, 1],\n              }}\n              transition={{\n                duration: 3,\n                delay: i * 0.5,\n                repeat: Infinity,\n              }}\n            />\n          ))}\n        </div>\n\n        <div className=\"text-center z-10 px-4\">\n          <HeroGlobe />\n\n          {/* Globe Instructions */}\n          <motion.div\n            className=\"text-center mb-8\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 2 }}\n          >\n            <p className=\"text-gray-400 text-sm\">\n              ✨ Hover over memory pulses to see details • Click the globe to make it spin • Move your mouse to rotate\n            </p>\n          </motion.div>\n          \n          <motion.h1 \n            className=\"text-5xl md:text-7xl font-light mb-6 bg-gradient-to-r from-white via-gray-200 to-gray-400 bg-clip-text text-transparent\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.5 }}\n          >\n            Memories sleep until<br />\n            they're <span className=\"gradient-text font-semibold\">echoed</span>\n          </motion.h1>\n          \n          <motion.p \n            className=\"text-xl md:text-2xl text-gray-400 mb-12 max-w-2xl mx-auto\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.7 }}\n          >\n            An AI-powered emotional memory network where your voice finds those who need to hear it\n          </motion.p>\n\n          <motion.div \n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, delay: 0.9 }}\n          >\n{isAuthenticated ? (\n              <div className=\"flex flex-col sm:flex-row gap-4 items-center\">\n                <div className=\"text-center sm:text-left\">\n                  <p className=\"text-purple-400 mb-2\">Welcome back, {user?.username}!</p>\n                  <Button \n                    size=\"lg\" \n                    onClick={() => setShowVoiceRecorder(true)}\n                    className=\"bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600 px-8 py-4 text-lg font-medium animate-glow\"\n                  >\n                    <Mic2 className=\"w-5 h-5 mr-2\" />\n                    Create Voice Memory\n                  </Button>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  className=\"border-gray-400 text-gray-400 hover:bg-gray-400 hover:text-white px-6 py-2\"\n                  onClick={handleLogout}\n                  disabled={logoutMutation.isPending}\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  {logoutMutation.isPending ? 'Logging out...' : 'Logout'}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600 px-8 py-4 text-lg font-medium animate-glow\"\n                  onClick={() => openAuthModal(\"login\")}\n                >\n                  🎧 Start Echoing\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  className=\"border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white px-8 py-4 text-lg font-medium\"\n                  onClick={() => openAuthModal(\"signup\")}\n                >\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Join ECHO\n                </Button>\n              </div>\n            )}\n          </motion.div>\n        </div>\n\n        <motion.div \n          className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\"\n          animate={{ y: [0, 10, 0] }}\n          transition={{ duration: 2, repeat: Infinity }}\n        >\n          <ChevronDown className=\"text-purple-400 w-6 h-6\" />\n        </motion.div>\n      </motion.section>\n\n      {/* What is ECHO Section */}\n      <motion.section \n        className=\"py-20 relative\"\n        initial={{ opacity: 0 }}\n        whileInView={{ opacity: 1 }}\n        transition={{ duration: 1 }}\n        viewport={{ once: true }}\n      >\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <motion.div \n              className=\"inline-block p-8 emotion-orb w-32 h-32 mx-auto mb-8 animate-float bg-gradient-to-br from-pink-500 to-yellow-400\"\n              whileHover={{ scale: 1.1 }}\n            >\n              <Heart className=\"w-16 h-16 text-white mx-auto mt-4\" />\n            </motion.div>\n            \n            <h2 className=\"text-4xl md:text-6xl font-light mb-8\">\n              What is <span className=\"gradient-text\">ECHO</span>?\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n              A whispered memory in Tokyo finds its echo in your heart in New York. \n              ECHO connects souls through shared emotions, not algorithms.\n            </p>\n          </div>\n\n          <MemoryCard />\n        </div>\n      </motion.section>\n\n      {/* How It Works Section */}\n      <motion.section \n        id=\"how-it-works\" \n        className=\"py-20 relative\"\n        initial={{ opacity: 0 }}\n        whileInView={{ opacity: 1 }}\n        transition={{ duration: 1 }}\n        viewport={{ once: true }}\n      >\n        <div className=\"container mx-auto px-6\">\n          <h2 className=\"text-4xl md:text-6xl font-light text-center mb-16\">\n            How <span className=\"gradient-text\">ECHO</span> Works\n          </h2>\n\n          {/* Step 1: Voice Post */}\n          <div className=\"max-w-6xl mx-auto mb-20\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <motion.div\n                initial={{ opacity: 0, x: -50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                viewport={{ once: true }}\n              >\n                <h3 className=\"text-3xl font-light mb-6 text-pink-400\">🎙️ Whisper Your Heart</h3>\n                <p className=\"text-xl text-gray-400 mb-6\">\n                  Share a voice memory with the world. Our AI understands your emotion and finds the perfect place for it to sleep.\n                </p>\n                <VoiceRecorder />\n              </motion.div>\n              \n              <motion.div \n                className=\"text-center\"\n                initial={{ opacity: 0, x: 50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                viewport={{ once: true }}\n              >\n                <div className=\"emotion-orb w-64 h-64 mx-auto animate-float bg-gradient-to-br from-pink-500 to-yellow-400\">\n                  <div className=\"flex items-center justify-center h-full\">\n                    <Mic2 className=\"w-16 h-16 text-white\" />\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n          </div>\n\n          {/* Step 2: Memory Sleeps */}\n          <div className=\"max-w-6xl mx-auto mb-20\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <motion.div \n                className=\"order-2 md:order-1 text-center\"\n                initial={{ opacity: 0, x: -50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                viewport={{ once: true }}\n              >\n                <div className=\"emotion-orb w-64 h-64 mx-auto animate-float memory-pulse bg-gradient-to-br from-purple-600 to-purple-400\">\n                  <div className=\"flex items-center justify-center h-full\">\n                    <MapPin className=\"w-16 h-16 text-white\" />\n                  </div>\n                </div>\n              </motion.div>\n              \n              <motion.div \n                className=\"order-1 md:order-2\"\n                initial={{ opacity: 0, x: 50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                viewport={{ once: true }}\n              >\n                <h3 className=\"text-3xl font-light mb-6 text-purple-400\">🗺️ Memory Finds Its Place</h3>\n                <p className=\"text-xl text-gray-400 mb-6\">\n                  Your memory drifts to a location where someone might need to hear it. It sleeps, waiting for the right soul to unlock it.\n                </p>\n                <div className=\"glass-morphism rounded-2xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <p className=\"text-white font-medium\">Memory Placed</p>\n                      <p className=\"text-purple-400\">📍 Central Park, NYC</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-gray-400 text-sm\">Status</p>\n                      <p className=\"text-yellow-400\">💤 Sleeping</p>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n          </div>\n\n          {/* Step 3: Unlock & Echo */}\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n              <motion.div\n                initial={{ opacity: 0, x: -50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                viewport={{ once: true }}\n              >\n                <h3 className=\"text-3xl font-light mb-6 text-cyan-400\">🔓 Someone Echoes</h3>\n                <p className=\"text-xl text-gray-400 mb-6\">\n                  When someone nearby feels a similar emotion, they unlock your memory. They can listen, feel, and echo back with their own voice.\n                </p>\n                <div className=\"glass-morphism rounded-2xl p-6\">\n                  <div className=\"flex items-center gap-4 mb-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-cyan-500 to-emerald-400 rounded-full flex items-center justify-center\">\n                      <Heart className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">Memory Unlocked</p>\n                      <p className=\"text-cyan-400 text-sm\">Someone echoed your emotion</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-xl p-4\">\n                    <p className=\"text-cyan-400 italic text-sm\">\"I understand that feeling. Here's my echo...\"</p>\n                  </div>\n                </div>\n              </motion.div>\n              \n              <motion.div \n                className=\"text-center\"\n                initial={{ opacity: 0, x: 50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                viewport={{ once: true }}\n              >\n                <div className=\"emotion-orb w-64 h-64 mx-auto animate-float bg-gradient-to-br from-cyan-500 to-emerald-400\">\n                  <div className=\"flex items-center justify-center h-full\">\n                    <motion.div\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      <Heart className=\"w-16 h-16 text-white\" />\n                    </motion.div>\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n          </div>\n        </div>\n      </motion.section>\n\n      {/* Interactive Emotion Map */}\n      <motion.section \n        id=\"emotion-map\" \n        className=\"py-20 relative\"\n        initial={{ opacity: 0 }}\n        whileInView={{ opacity: 1 }}\n        transition={{ duration: 1 }}\n        viewport={{ once: true }}\n      >\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-6xl font-light mb-8\">\n              Global <span className=\"gradient-text\">Emotion</span> Map\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n              Explore anonymous emotions echoing around the world. Each pulse represents a shared human experience.\n            </p>\n          </div>\n\n          <EmotionMap />\n        </div>\n      </motion.section>\n\n      {/* Product Features */}\n      <motion.section \n        id=\"features\" \n        className=\"py-20 relative\"\n        initial={{ opacity: 0 }}\n        whileInView={{ opacity: 1 }}\n        transition={{ duration: 1 }}\n        viewport={{ once: true }}\n      >\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-6xl font-light mb-8\">\n              Features That <span className=\"gradient-text\">Connect</span> Souls\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto\">\n              Every feature is designed to deepen emotional connections, not just digital ones.\n            </p>\n          </div>\n\n          <FeatureShowcase />\n\n          {/* Additional features grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-16\">\n            {[\n              {\n                icon: Shield,\n                title: \"🔐 Privacy Controls\",\n                description: \"Choose who can unlock your memories: Public, Friends, or Emotion-matched\",\n                gradient: \"from-purple-600 to-pink-500\"\n              },\n              {\n                icon: Link2,\n                title: \"🔁 Echo Chains\",\n                description: \"Memories create chains of emotional responses, building deeper connections\",\n                gradient: \"from-pink-500 to-yellow-400\"\n              },\n              {\n                icon: Archive,\n                title: \"📦 Memory Vault\",\n                description: \"Keep all unlocked memories safe in your personal emotional archive\",\n                gradient: \"from-cyan-500 to-emerald-400\"\n              }\n            ].map((feature, index) => (\n              <motion.div\n                key={feature.title}\n                className=\"glass-morphism rounded-2xl p-6 text-center\"\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n                whileHover={{ scale: 1.05 }}\n              >\n                <div className={`w-16 h-16 bg-gradient-to-r ${feature.gradient} rounded-full mx-auto mb-4 flex items-center justify-center`}>\n                  <feature.icon className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"text-lg font-medium mb-2\">{feature.title}</h4>\n                <p className=\"text-gray-400 text-sm\">{feature.description}</p>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </motion.section>\n\n      {/* Call to Action */}\n      <motion.section \n        id=\"cta\"\n        className=\"py-20 relative\"\n        initial={{ opacity: 0 }}\n        whileInView={{ opacity: 1 }}\n        transition={{ duration: 1 }}\n        viewport={{ once: true }}\n      >\n        <div className=\"container mx-auto px-6 text-center\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-500/20 rounded-full blur-3xl animate-pulse-slow\"></div>\n              \n              <div className=\"relative z-10\">\n                <h2 className=\"text-4xl md:text-6xl font-light mb-8\">\n                  Some memories wait for the<br />\n                  <span className=\"gradient-text\">right person</span> to remember them\n                </h2>\n                \n                <p className=\"text-xl text-gray-400 mb-12 max-w-2xl mx-auto\">\n                  Join the ECHO community and discover the magic of shared emotions. Your voice might be exactly what someone needs to hear.\n                </p>\n\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-8\">\n                  {isAuthenticated ? (\n                    <>\n                      <Button \n                        size=\"lg\"\n                        className=\"bg-gradient-to-r from-pink-500 to-yellow-400 hover:from-pink-600 hover:to-yellow-500 px-8 py-4 text-lg font-medium\"\n                      >\n                        🎧 Create Your First Memory\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"lg\"\n                        className=\"border-cyan-400 text-cyan-400 hover:bg-cyan-400 hover:text-white px-8 py-4 text-lg font-medium\"\n                      >\n                        🗺️ Explore Memory Map\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <Button \n                        size=\"lg\"\n                        className=\"bg-gradient-to-r from-pink-500 to-yellow-400 hover:from-pink-600 hover:to-yellow-500 px-8 py-4 text-lg font-medium\"\n                        onClick={() => openAuthModal(\"login\")}\n                      >\n                        🎧 Start Echoing Now\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"lg\"\n                        className=\"border-cyan-400 text-cyan-400 hover:bg-cyan-400 hover:text-white px-8 py-4 text-lg font-medium\"\n                        onClick={() => openAuthModal(\"signup\")}\n                      >\n                        📝 Create Account\n                      </Button>\n                    </>\n                  )}\n                </div>\n\n                <div className=\"text-sm text-gray-500\">\n                  <p>🔒 Secure & Private • 🌍 Global Community • ✨ Free to Join</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.section>\n\n      {/* Footer */}\n      <footer className=\"py-12 border-t border-white/10\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"mb-6 md:mb-0\">\n              <div className=\"text-3xl font-bold gradient-text mb-2\">\n                ECHO\n              </div>\n              <p className=\"text-gray-400 text-sm\">Made with emotion 💜</p>\n            </div>\n\n            <div className=\"flex flex-col md:flex-row items-center gap-8\">\n              <nav className=\"flex gap-6\">\n                {[\n                  { name: \"Privacy\", path: \"/privacy\" },\n                  { name: \"Terms\", path: \"/terms\" },\n                  { name: \"Support\", path: \"/support\" },\n                  { name: \"Contact\", path: \"/contact\" }\n                ].map((link) => (\n                  <Link\n                    key={link.name}\n                    href={link.path}\n                    className=\"text-gray-400 hover:text-purple-400 transition-colors text-sm cursor-pointer\"\n                  >\n                    {link.name}\n                  </Link>\n                ))}\n              </nav>\n\n              <div className=\"flex gap-4\">\n                {[Users, Globe, Heart].map((Icon, index) => (\n                  <a\n                    key={index}\n                    href=\"#\"\n                    className=\"w-10 h-10 bg-white/5 rounded-full flex items-center justify-center hover:bg-purple-400/20 transition-colors\"\n                  >\n                    <Icon className=\"w-5 h-5 text-purple-400\" />\n                  </a>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-8 pt-8 border-t border-white/10 text-center\">\n            <p className=\"text-gray-500 text-sm\">\n              © 2024 ECHO. All rights reserved.\n              <button className=\"text-purple-400 hover:text-pink-400 transition-colors ml-4\">\n                Switch to Light Mode ☀️\n              </button>\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Authentication Modal */}\n      <AuthModal \n        open={showAuthModal} \n        onOpenChange={setShowAuthModal}\n        defaultTab={authTab}\n      />\n\n      {/* Voice Memory Recorder */}\n      <VoiceMemoryRecorder \n        isOpen={showVoiceRecorder}\n        onClose={() => setShowVoiceRecorder(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":24437},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Shield, Eye, Lock, UserCheck } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-950 to-black text-white\">\n      <div className=\"container mx-auto px-6 py-20\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-8 text-purple-400 hover:text-purple-300\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-purple-600 to-pink-500 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Shield className=\"w-10 h-10 text-white\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-light mb-4\">\n                Privacy <span className=\"gradient-text\">Policy</span>\n              </h1>\n              <p className=\"text-xl text-gray-400\">\n                Your emotional memories deserve the highest protection\n              </p>\n            </div>\n\n            <div className=\"glass-morphism rounded-3xl p-8 mb-8\">\n              <div className=\"space-y-8\">\n                <section>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Eye className=\"w-6 h-6 text-cyan-400\" />\n                    <h2 className=\"text-2xl font-semibold\">What We Collect</h2>\n                  </div>\n                  <div className=\"text-gray-300 space-y-3\">\n                    <p>We collect only what's necessary to create meaningful emotional connections:</p>\n                    <ul className=\"list-disc pl-6 space-y-2\">\n                      <li>Voice recordings and their emotional analysis</li>\n                      <li>Location data for memory placement (with your permission)</li>\n                      <li>Basic account information (email, username)</li>\n                      <li>Interaction data to improve emotion matching</li>\n                    </ul>\n                  </div>\n                </section>\n\n                <section>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Lock className=\"w-6 h-6 text-pink-400\" />\n                    <h2 className=\"text-2xl font-semibold\">How We Protect You</h2>\n                  </div>\n                  <div className=\"text-gray-300 space-y-3\">\n                    <ul className=\"list-disc pl-6 space-y-2\">\n                      <li>End-to-end encryption for all voice memories</li>\n                      <li>Anonymized emotional data for the global map</li>\n                      <li>You control who can unlock your memories</li>\n                      <li>Location data is never shared without permission</li>\n                      <li>AI processing happens securely on our servers</li>\n                    </ul>\n                  </div>\n                </section>\n\n                <section>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <UserCheck className=\"w-6 h-6 text-emerald-400\" />\n                    <h2 className=\"text-2xl font-semibold\">Your Rights</h2>\n                  </div>\n                  <div className=\"text-gray-300 space-y-3\">\n                    <ul className=\"list-disc pl-6 space-y-2\">\n                      <li>Delete your memories at any time</li>\n                      <li>Export your emotional data</li>\n                      <li>Control memory access settings</li>\n                      <li>Opt out of AI emotion analysis</li>\n                      <li>Request complete account deletion</li>\n                    </ul>\n                  </div>\n                </section>\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold mb-4\">Contact Us</h2>\n                  <p className=\"text-gray-300\">\n                    Questions about your privacy? Email us at{\" \"}\n                    <a href=\"mailto:privacy@echo.app\" className=\"text-purple-400 hover:text-purple-300\">\n                      privacy@echo.app\n                    </a>\n                  </p>\n                </section>\n              </div>\n            </div>\n\n            <div className=\"text-center text-gray-500 text-sm\">\n              Last updated: January 2025\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":4693},"client/src/pages/support.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowLeft, HelpCircle, MessageCircle, Book, Zap, Mail } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Support() {\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email && message) {\n      toast({\n        title: \"Support request sent! 💜\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setEmail(\"\");\n      setMessage(\"\");\n    }\n  };\n\n  const faqs = [\n    {\n      question: \"How does emotion detection work?\",\n      answer: \"Our AI analyzes voice tone, pace, and linguistic patterns to detect emotions. It's trained on thousands of emotional voice samples to understand subtle emotional nuances.\"\n    },\n    {\n      question: \"Can I delete my memories?\",\n      answer: \"Yes, you have full control over your memories. You can delete individual memories or your entire account at any time from your profile settings.\"\n    },\n    {\n      question: \"How are memories matched to locations?\",\n      answer: \"Our AI considers your current emotion, the memory's emotional content, and location significance to place memories where they're most likely to resonate with others.\"\n    },\n    {\n      question: \"Is my location data private?\",\n      answer: \"Your exact location is never shared. We only use general location areas to enable memory discovery while protecting your privacy.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-950 to-black text-white\">\n      <div className=\"container mx-auto px-6 py-20\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-8 text-purple-400 hover:text-purple-300\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-emerald-500 to-cyan-400 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <HelpCircle className=\"w-10 h-10 text-white\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-light mb-4\">\n                Support <span className=\"gradient-text\">Center</span>\n              </h1>\n              <p className=\"text-xl text-gray-400\">\n                We're here to help you connect and share emotions\n              </p>\n            </div>\n\n            {/* Quick Help Cards */}\n            <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n              {[\n                {\n                  icon: MessageCircle,\n                  title: \"Live Chat\",\n                  description: \"Chat with our support team\",\n                  action: \"Start Chat\",\n                  gradient: \"from-pink-500 to-rose-400\"\n                },\n                {\n                  icon: Book,\n                  title: \"Documentation\",\n                  description: \"Learn how ECHO works\",\n                  action: \"Read Docs\",\n                  gradient: \"from-purple-500 to-indigo-400\"\n                },\n                {\n                  icon: Zap,\n                  title: \"Report Bug\",\n                  description: \"Help us improve ECHO\",\n                  action: \"Report Issue\",\n                  gradient: \"from-cyan-500 to-teal-400\"\n                }\n              ].map((item, index) => (\n                <motion.div\n                  key={item.title}\n                  className=\"glass-morphism rounded-2xl p-6 text-center\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <div className={`w-12 h-12 bg-gradient-to-r ${item.gradient} rounded-full mx-auto mb-4 flex items-center justify-center`}>\n                    <item.icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium mb-2\">{item.title}</h3>\n                  <p className=\"text-gray-400 text-sm mb-4\">{item.description}</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                    {item.action}\n                  </Button>\n                </motion.div>\n              ))}\n            </div>\n\n            {/* FAQ Section */}\n            <div className=\"glass-morphism rounded-3xl p-8 mb-8\">\n              <h2 className=\"text-2xl font-semibold mb-6 text-center\">Frequently Asked Questions</h2>\n              <div className=\"space-y-6\">\n                {faqs.map((faq, index) => (\n                  <motion.div\n                    key={index}\n                    className=\"border-b border-white/10 pb-6 last:border-b-0\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <h3 className=\"text-lg font-medium mb-3 text-purple-400\">{faq.question}</h3>\n                    <p className=\"text-gray-300\">{faq.answer}</p>\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n\n            {/* Contact Form */}\n            <div className=\"glass-morphism rounded-3xl p-8\">\n              <div className=\"text-center mb-6\">\n                <Mail className=\"w-12 h-12 text-cyan-400 mx-auto mb-4\" />\n                <h2 className=\"text-2xl font-semibold\">Get in Touch</h2>\n                <p className=\"text-gray-400\">Can't find what you're looking for? Send us a message.</p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-6 max-w-md mx-auto\">\n                <div>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"Your email address\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"bg-white/5 border-white/20 text-white placeholder-gray-400\"\n                    required\n                  />\n                </div>\n                <div>\n                  <textarea\n                    placeholder=\"Describe your issue or question...\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    className=\"w-full h-32 bg-white/5 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 resize-none focus:outline-none focus:border-purple-400\"\n                    required\n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":7398},"client/src/pages/terms.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, FileText, Users, AlertCircle, Heart } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Terms() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-950 to-black text-white\">\n      <div className=\"container mx-auto px-6 py-20\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-8 text-purple-400 hover:text-purple-300\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-cyan-500 to-emerald-400 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <FileText className=\"w-10 h-10 text-white\" />\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-light mb-4\">\n                Terms of <span className=\"gradient-text\">Service</span>\n              </h1>\n              <p className=\"text-xl text-gray-400\">\n                Guidelines for our emotional memory community\n              </p>\n            </div>\n\n            <div className=\"glass-morphism rounded-3xl p-8 mb-8\">\n              <div className=\"space-y-8\">\n                <section>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Heart className=\"w-6 h-6 text-pink-400\" />\n                    <h2 className=\"text-2xl font-semibold\">Our Mission</h2>\n                  </div>\n                  <p className=\"text-gray-300\">\n                    ECHO exists to create authentic emotional connections between souls. \n                    By using our service, you agree to treat every memory and echo with \n                    the respect and empathy it deserves.\n                  </p>\n                </section>\n\n                <section>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Users className=\"w-6 h-6 text-cyan-400\" />\n                    <h2 className=\"text-2xl font-semibold\">Community Guidelines</h2>\n                  </div>\n                  <div className=\"text-gray-300 space-y-3\">\n                    <p>To maintain a safe emotional space:</p>\n                    <ul className=\"list-disc pl-6 space-y-2\">\n                      <li>Share genuine emotions and experiences</li>\n                      <li>Respect the vulnerability of others' memories</li>\n                      <li>No harassment, hate speech, or harmful content</li>\n                      <li>Protect the anonymity and privacy of all users</li>\n                      <li>Report inappropriate content to help keep our community safe</li>\n                    </ul>\n                  </div>\n                </section>\n\n                <section>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <AlertCircle className=\"w-6 h-6 text-yellow-400\" />\n                    <h2 className=\"text-2xl font-semibold\">Content Responsibility</h2>\n                  </div>\n                  <div className=\"text-gray-300 space-y-3\">\n                    <ul className=\"list-disc pl-6 space-y-2\">\n                      <li>You own your voice memories and emotional content</li>\n                      <li>You're responsible for the content you share</li>\n                      <li>We reserve the right to remove harmful or inappropriate content</li>\n                      <li>AI emotion analysis is provided as-is and may not be perfect</li>\n                      <li>Deleted memories are permanently removed from our systems</li>\n                    </ul>\n                  </div>\n                </section>\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold mb-4\">Service Availability</h2>\n                  <p className=\"text-gray-300\">\n                    ECHO is currently in beta. We strive for 99.9% uptime but cannot \n                    guarantee uninterrupted service. We'll notify users of planned maintenance \n                    and work quickly to resolve any technical issues.\n                  </p>\n                </section>\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold mb-4\">Changes to Terms</h2>\n                  <p className=\"text-gray-300\">\n                    We may update these terms as ECHO evolves. Users will be notified \n                    of significant changes via email or app notification.\n                  </p>\n                </section>\n\n                <section>\n                  <h2 className=\"text-2xl font-semibold mb-4\">Contact</h2>\n                  <p className=\"text-gray-300\">\n                    Questions about our terms?{\" \"}\n                    <a href=\"mailto:legal@echo.app\" className=\"text-purple-400 hover:text-purple-300\">\n                      legal@echo.app\n                    </a>\n                  </p>\n                </section>\n              </div>\n            </div>\n\n            <div className=\"text-center text-gray-500 text-sm\">\n              Last updated: January 2025\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":5432},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"main.sh":{"content":"#!/bin/bash\n\n# Start Java Spring Boot application\necho \"Starting ECHO Java Spring Boot Application...\"\nmvn spring-boot:run","size_bytes":122},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.116.1\",\n    \"pydantic>=2.11.7\",\n    \"python-multipart>=0.0.20\",\n    \"uvicorn[standard]>=0.35.0\",\n]\n","size_bytes":257},"emotion-service/app.py":{"content":"from transformers import pipeline\nfrom flask import Flask, request, jsonify\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\n\n# Initialize emotion classifier with Hugging Face model\nlogger.info(\"Loading emotion classification model...\")\ntry:\n    emotion_classifier = pipeline(\n        \"text-classification\", \n        model=\"j-hartmann/emotion-english-distilroberta-base\",\n        return_all_scores=True\n    )\n    logger.info(\"Emotion classifier loaded successfully\")\nexcept Exception as e:\n    logger.error(f\"Failed to load emotion classifier: {e}\")\n    emotion_classifier = None\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\"status\": \"healthy\", \"model_loaded\": emotion_classifier is not None})\n\n@app.route('/analyze-emotion', methods=['POST'])\ndef analyze_emotion():\n    \"\"\"Analyze emotion from text input\"\"\"\n    try:\n        if not emotion_classifier:\n            return jsonify({\"error\": \"Emotion classifier not available\"}), 500\n            \n        data = request.get_json()\n        if not data or 'text' not in data:\n            return jsonify({\"error\": \"Missing 'text' field in request\"}), 400\n            \n        text = data['text'].strip()\n        if not text:\n            return jsonify({\"error\": \"Empty text provided\"}), 400\n            \n        logger.info(f\"Analyzing emotion for text: {text[:100]}...\")\n        \n        # Get emotion predictions\n        results = emotion_classifier(text)\n        \n        # Find the emotion with highest confidence\n        top_emotion = max(results, key=lambda x: x['score'])\n        \n        # Map emotion labels to ECHO's emotion categories\n        emotion_mapping = {\n            'joy': 'joy',\n            'sadness': 'nostalgia', \n            'anger': 'contemplative',\n            'fear': 'calm',\n            'surprise': 'excitement',\n            'disgust': 'contemplative',\n            'love': 'love'\n        }\n        \n        detected_emotion = emotion_mapping.get(top_emotion['label'].lower(), 'contemplative')\n        confidence = round(top_emotion['score'], 3)\n        \n        logger.info(f\"Detected emotion: {detected_emotion} (confidence: {confidence})\")\n        \n        return jsonify({\n            \"emotion\": detected_emotion,\n            \"confidence\": confidence,\n            \"raw_results\": results\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error analyzing emotion: {e}\")\n        return jsonify({\"error\": \"Failed to analyze emotion\"}), 500\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=5001, debug=False)","size_bytes":2663},"emotion-service/simple_app.py":{"content":"from flask import Flask, request, jsonify\nimport logging\nimport re\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\"status\": \"healthy\", \"model_loaded\": True})\n\n@app.route('/analyze-emotion', methods=['POST'])\ndef analyze_emotion():\n    \"\"\"Analyze emotion from text input using keyword-based detection\"\"\"\n    try:\n        data = request.get_json()\n        if not data or 'text' not in data:\n            return jsonify({\"error\": \"Missing 'text' field in request\"}), 400\n            \n        text = data['text'].strip()\n        if not text:\n            return jsonify({\"error\": \"Empty text provided\"}), 400\n            \n        logger.info(f\"Analyzing emotion for text: {text[:100]}...\")\n        \n        # Keyword-based emotion detection\n        emotion, confidence = detect_emotion_keywords(text)\n        \n        logger.info(f\"Detected emotion: {emotion} (confidence: {confidence})\")\n        \n        return jsonify({\n            \"emotion\": emotion,\n            \"confidence\": confidence,\n            \"method\": \"keyword_analysis\"\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error analyzing emotion: {e}\")\n        return jsonify({\"error\": \"Failed to analyze emotion\"}), 500\n\ndef detect_emotion_keywords(text):\n    \"\"\"Detect emotion using keyword matching\"\"\"\n    text_lower = text.lower()\n    \n    # Emotion keyword patterns\n    emotion_patterns = {\n        'joy': ['happy', 'joy', 'excited', 'amazing', 'wonderful', 'great', 'fantastic', 'love', 'smile', 'laugh'],\n        'nostalgia': ['miss', 'remember', 'memory', 'past', 'used to', 'back then', 'childhood', 'old', 'nostalgia'],\n        'love': ['love', 'adore', 'care', 'heart', 'sweet', 'beautiful', 'precious', 'dear', 'cherish'],\n        'calm': ['peaceful', 'calm', 'quiet', 'serene', 'tranquil', 'relaxed', 'still', 'gentle'],\n        'excitement': ['excited', 'thrilled', 'pumped', 'can\\'t wait', 'amazing', 'incredible', 'awesome'],\n        'contemplative': ['think', 'wonder', 'reflect', 'consider', 'ponder', 'question', 'maybe', 'perhaps'],\n        'hopeful': ['hope', 'future', 'dream', 'wish', 'possibility', 'tomorrow', 'someday', 'believe'],\n        'grateful': ['thank', 'grateful', 'appreciate', 'blessed', 'fortunate', 'lucky']\n    }\n    \n    # Count matches for each emotion\n    emotion_scores = {}\n    for emotion, keywords in emotion_patterns.items():\n        score = 0\n        for keyword in keywords:\n            # Count occurrences of each keyword\n            score += len(re.findall(r'\\b' + re.escape(keyword) + r'\\b', text_lower))\n        emotion_scores[emotion] = score\n    \n    # Find emotion with highest score\n    if max(emotion_scores.values()) == 0:\n        return 'contemplative', 0.6  # Default emotion\n    \n    best_emotion = max(emotion_scores, key=emotion_scores.get)\n    max_score = emotion_scores[best_emotion]\n    \n    # Calculate confidence based on keyword matches\n    confidence = min(0.95, 0.5 + (max_score * 0.15))\n    \n    return best_emotion, round(confidence, 3)\n\nif __name__ == \"__main__\":\n    logger.info(\"Starting simple emotion analysis service...\")\n    app.run(host='0.0.0.0', port=5001, debug=False)","size_bytes":3313},"emotion-service/start_service.py":{"content":"#!/usr/bin/env python3\nimport json\nimport sys\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass EmotionHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        if self.path == '/health':\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps({\"status\": \"healthy\", \"model_loaded\": True}).encode())\n        else:\n            self.send_error(404)\n\n    def do_POST(self):\n        if self.path == '/analyze-emotion':\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            try:\n                data = json.loads(post_data.decode('utf-8'))\n                text = data.get('text', '').lower()\n                \n                # Simple keyword-based emotion detection\n                if any(word in text for word in ['happy', 'excited', 'joy', 'great', 'amazing']):\n                    emotion, confidence = 'joy', 0.85\n                elif any(word in text for word in ['miss', 'remember', 'memory', 'past']):\n                    emotion, confidence = 'nostalgia', 0.80\n                elif any(word in text for word in ['love', 'adore', 'care', 'beautiful']):\n                    emotion, confidence = 'love', 0.75\n                elif any(word in text for word in ['calm', 'peaceful', 'quiet', 'serene']):\n                    emotion, confidence = 'calm', 0.70\n                elif any(word in text for word in ['hope', 'future', 'dream', 'tomorrow']):\n                    emotion, confidence = 'hopeful', 0.68\n                else:\n                    emotion, confidence = 'contemplative', 0.65\n                \n                response = {\n                    \"emotion\": emotion,\n                    \"confidence\": confidence,\n                    \"method\": \"keyword_analysis\"\n                }\n                \n                self.send_response(200)\n                self.send_header('Content-type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(response).encode())\n                \n            except Exception as e:\n                self.send_response(500)\n                self.send_header('Content-type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps({\"error\": str(e)}).encode())\n        else:\n            self.send_error(404)\n\nif __name__ == '__main__':\n    server = HTTPServer(('localhost', 5001), EmotionHandler)\n    print(\"Emotion analysis service running on http://localhost:5001\")\n    server.serve_forever()","size_bytes":2634},"src/main/java/com/echo/EchoApplication.java":{"content":"package com.echo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class EchoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EchoApplication.class, args);\n    }\n}","size_bytes":306},"src/main/java/com/echo/config/DatabaseConfig.java":{"content":"package com.echo.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\n\nimport javax.sql.DataSource;\nimport java.net.URI;\n\n@Configuration\npublic class DatabaseConfig {\n    \n    @Value(\"${DATABASE_URL:postgresql://localhost:5432/echo}\")\n    private String databaseUrl;\n    \n    @Bean\n    public DataSource dataSource() {\n        try {\n            URI dbUri = new URI(databaseUrl);\n            \n            String username = dbUri.getUserInfo().split(\":\")[0];\n            String password = dbUri.getUserInfo().split(\":\")[1];\n            \n            // Handle default port for PostgreSQL\n            int port = dbUri.getPort() == -1 ? 5432 : dbUri.getPort();\n            String jdbcUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \":\" + port + dbUri.getPath();\n            \n            // Add SSL mode if not present\n            if (dbUri.getQuery() != null && dbUri.getQuery().contains(\"sslmode\")) {\n                jdbcUrl += \"?\" + dbUri.getQuery();\n            } else {\n                jdbcUrl += \"?sslmode=require\";\n            }\n            \n            return DataSourceBuilder.create()\n                .driverClassName(\"org.postgresql.Driver\")\n                .url(jdbcUrl)\n                .username(username)\n                .password(password)\n                .build();\n        } catch (Exception e) {\n            System.err.println(\"Error parsing DATABASE_URL: \" + e.getMessage());\n            // Fallback for local development\n            return DataSourceBuilder.create()\n                .driverClassName(\"org.postgresql.Driver\")\n                .url(\"jdbc:postgresql://localhost:5432/echo\")\n                .username(\"postgres\")\n                .password(\"password\")\n                .build();\n        }\n    }\n}","size_bytes":1902},"src/main/java/com/echo/config/SecurityConfig.java":{"content":"package com.echo.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public BCryptPasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -> csrf.disable())\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers(\"/api/auth/register\", \"/api/auth/login\").permitAll()\n                .requestMatchers(\"/api/memories/public\", \"/api/memories/nearby/**\", \"/api/emotions/map\").permitAll()\n                .requestMatchers(\"/\", \"/landing\", \"/static/**\", \"/css/**\", \"/js/**\", \"/images/**\").permitAll()\n                .requestMatchers(\"/api/**\").authenticated()\n                .anyRequest().permitAll()\n            )\n            .sessionManagement(session -> session\n                .maximumSessions(1)\n                .maxSessionsPreventsLogin(false)\n            );\n\n        return http.build();\n    }\n}","size_bytes":1438},"src/main/java/com/echo/controller/AuthController.java":{"content":"package com.echo.controller;\n\nimport com.echo.model.User;\nimport com.echo.service.UserService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(\"/register\")\n    public ResponseEntity<?> register(@RequestBody Map<String, String> request, HttpSession session) {\n        try {\n            String username = request.get(\"username\");\n            String email = request.get(\"email\");\n            String password = request.get(\"password\");\n\n            if (username == null || email == null || password == null) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Missing required fields\"));\n            }\n\n            User user = userService.createUser(username, email, password);\n            \n            // Create session\n            session.setAttribute(\"userId\", user.getId());\n            session.setAttribute(\"username\", user.getUsername());\n\n            Map<String, Object> response = new HashMap<>();\n            response.put(\"id\", user.getId());\n            response.put(\"username\", user.getUsername());\n            response.put(\"email\", user.getEmail());\n            response.put(\"hasCompletedOnboarding\", user.getHasCompletedOnboarding());\n\n            return ResponseEntity.ok(response);\n\n        } catch (RuntimeException e) {\n            return ResponseEntity.badRequest().body(Map.of(\"message\", e.getMessage()));\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Registration failed\"));\n        }\n    }\n\n    @PostMapping(\"/login\")\n    public ResponseEntity<?> login(@RequestBody Map<String, String> request, HttpSession session) {\n        try {\n            String usernameOrEmail = request.get(\"usernameOrEmail\");\n            String password = request.get(\"password\");\n\n            if (usernameOrEmail == null || password == null) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Missing credentials\"));\n            }\n\n            Optional<User> userOptional = userService.findByUsernameOrEmail(usernameOrEmail);\n            \n            if (userOptional.isEmpty()) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Invalid credentials\"));\n            }\n\n            User user = userOptional.get();\n            \n            if (!userService.validatePassword(user, password)) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Invalid credentials\"));\n            }\n\n            // Create session\n            session.setAttribute(\"userId\", user.getId());\n            session.setAttribute(\"username\", user.getUsername());\n\n            Map<String, Object> response = new HashMap<>();\n            response.put(\"id\", user.getId());\n            response.put(\"username\", user.getUsername());\n            response.put(\"email\", user.getEmail());\n            response.put(\"hasCompletedOnboarding\", user.getHasCompletedOnboarding());\n\n            return ResponseEntity.ok(response);\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Login failed\"));\n        }\n    }\n\n    @PostMapping(\"/logout\")\n    public ResponseEntity<?> logout(HttpSession session) {\n        session.invalidate();\n        return ResponseEntity.ok(Map.of(\"message\", \"Logged out successfully\"));\n    }\n\n    @GetMapping(\"/me\")\n    public ResponseEntity<?> getCurrentUser(HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        Optional<User> userOptional = userService.findById(userId);\n        \n        if (userOptional.isEmpty()) {\n            session.invalidate();\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"User not found\"));\n        }\n\n        User user = userOptional.get();\n        \n        Map<String, Object> response = new HashMap<>();\n        response.put(\"id\", user.getId());\n        response.put(\"username\", user.getUsername());\n        response.put(\"email\", user.getEmail());\n        response.put(\"hasCompletedOnboarding\", user.getHasCompletedOnboarding());\n        response.put(\"avatar\", user.getAvatar());\n        response.put(\"bio\", user.getBio());\n\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/complete-onboarding\")\n    public ResponseEntity<?> completeOnboarding(HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        Optional<User> userOptional = userService.findById(userId);\n        \n        if (userOptional.isEmpty()) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"User not found\"));\n        }\n\n        User user = userOptional.get();\n        user.setHasCompletedOnboarding(1);\n        userService.updateUser(user);\n\n        return ResponseEntity.ok(Map.of(\"message\", \"Onboarding completed\"));\n    }\n}","size_bytes":5438},"src/main/java/com/echo/controller/HomeController.java":{"content":"package com.echo.controller;\n\nimport com.echo.model.User;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n    \n    @GetMapping(\"/\")\n    public String index(HttpSession session, Model model) {\n        User user = (User) session.getAttribute(\"user\");\n        \n        if (user != null) {\n            model.addAttribute(\"user\", user);\n            return \"dashboard\";\n        }\n        \n        return \"landing\";\n    }\n    \n    @GetMapping(\"/login\")\n    public String login() {\n        return \"auth\";\n    }\n    \n    @GetMapping(\"/register\")\n    public String register() {\n        return \"auth\";\n    }\n    \n    @GetMapping(\"/dashboard\")\n    public String dashboard(HttpSession session, Model model) {\n        User user = (User) session.getAttribute(\"user\");\n        \n        if (user == null) {\n            return \"redirect:/login\";\n        }\n        \n        model.addAttribute(\"user\", user);\n        return \"dashboard\";\n    }\n}","size_bytes":1106},"src/main/java/com/echo/controller/MemoryController.java":{"content":"package com.echo.controller;\n\nimport com.echo.model.Memory;\nimport com.echo.model.User;\nimport com.echo.service.MemoryService;\nimport com.echo.service.UserService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/memories\")\npublic class MemoryController {\n\n    @Autowired\n    private MemoryService memoryService;\n\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(\"/create\")\n    public ResponseEntity<?> createMemory(@RequestBody Map<String, Object> request, HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        try {\n            Optional<User> userOptional = userService.findById(userId);\n            if (userOptional.isEmpty()) {\n                return ResponseEntity.status(401).body(Map.of(\"message\", \"User not found\"));\n            }\n\n            User user = userOptional.get();\n            \n            String title = (String) request.get(\"title\");\n            String content = (String) request.get(\"content\");\n            String audioData = (String) request.get(\"audioData\");\n            Double latitude = Double.valueOf(request.get(\"latitude\").toString());\n            Double longitude = Double.valueOf(request.get(\"longitude\").toString());\n            String locationName = (String) request.get(\"locationName\");\n\n            if (title == null || latitude == null || longitude == null) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Missing required fields\"));\n            }\n\n            Memory memory = memoryService.createMemory(user, title, content, audioData, \n                                                     latitude, longitude, locationName);\n\n            Map<String, Object> response = new HashMap<>();\n            response.put(\"id\", memory.getId());\n            response.put(\"title\", memory.getTitle());\n            response.put(\"content\", memory.getContent());\n            response.put(\"emotion\", memory.getEmotion());\n            response.put(\"emotionConfidence\", memory.getEmotionConfidence());\n            response.put(\"latitude\", memory.getLatitude());\n            response.put(\"longitude\", memory.getLongitude());\n            response.put(\"locationName\", memory.getLocationName());\n            response.put(\"createdAt\", memory.getCreatedAt());\n\n            return ResponseEntity.ok(response);\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to create memory\"));\n        }\n    }\n\n    @GetMapping(\"/user\")\n    public ResponseEntity<?> getUserMemories(HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        try {\n            List<Memory> memories = memoryService.findByUserId(userId);\n            return ResponseEntity.ok(Map.of(\"memories\", memories));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch memories\"));\n        }\n    }\n\n    @GetMapping(\"/nearby/{latitude}/{longitude}\")\n    public ResponseEntity<?> getNearbyMemories(@PathVariable Double latitude, \n                                             @PathVariable Double longitude,\n                                             @RequestParam(required = false) Double radius) {\n        try {\n            List<Memory> memories = memoryService.findNearbyMemories(latitude, longitude, radius);\n            return ResponseEntity.ok(Map.of(\"memories\", memories));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch nearby memories\"));\n        }\n    }\n\n    @GetMapping(\"/public\")\n    public ResponseEntity<?> getPublicMemories() {\n        try {\n            List<Memory> memories = memoryService.findPublicActiveMemories();\n            return ResponseEntity.ok(Map.of(\"memories\", memories));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch public memories\"));\n        }\n    }\n\n    @GetMapping(\"/emotion/{emotion}\")\n    public ResponseEntity<?> getMemoriesByEmotion(@PathVariable String emotion) {\n        try {\n            List<Memory> memories = memoryService.findByEmotion(emotion);\n            return ResponseEntity.ok(Map.of(\"memories\", memories));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch memories by emotion\"));\n        }\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<?> getMemory(@PathVariable String id) {\n        try {\n            Optional<Memory> memoryOptional = memoryService.findById(id);\n            \n            if (memoryOptional.isEmpty()) {\n                return ResponseEntity.notFound().build();\n            }\n\n            return ResponseEntity.ok(memoryOptional.get());\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch memory\"));\n        }\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<?> deleteMemory(@PathVariable String id, HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        try {\n            Optional<Memory> memoryOptional = memoryService.findById(id);\n            \n            if (memoryOptional.isEmpty()) {\n                return ResponseEntity.notFound().build();\n            }\n\n            Memory memory = memoryOptional.get();\n            \n            // Check if user owns the memory\n            if (!memory.getUser().getId().equals(userId)) {\n                return ResponseEntity.status(403).body(Map.of(\"message\", \"Not authorized\"));\n            }\n\n            memoryService.deleteMemory(id);\n            return ResponseEntity.ok(Map.of(\"message\", \"Memory deleted successfully\"));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to delete memory\"));\n        }\n    }\n}","size_bytes":6649},"src/main/java/com/echo/model/Memory.java":{"content":"package com.echo.model;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Table(name = \"memories\")\npublic class Memory {\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"user_id\", nullable = false)\n    private User user;\n\n    @NotBlank\n    @Column(nullable = false)\n    private String title;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String description;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String content;\n\n    @Column(name = \"audio_data\", columnDefinition = \"TEXT\")\n    private String audioData;\n\n    @Column(name = \"audio_url\")\n    private String audioUrl;\n\n    @NotBlank\n    @Column(nullable = false)\n    private String emotion;\n\n    @Column(name = \"emotion_confidence\")\n    private Double emotionConfidence = 0.0;\n\n    @NotNull\n    @Column(nullable = false)\n    private Double latitude;\n\n    @NotNull\n    @Column(nullable = false)\n    private Double longitude;\n\n    @Column(name = \"location_name\")\n    private String locationName;\n\n    private Integer duration = 0;\n\n    @Column(name = \"access_type\", nullable = false)\n    private String accessType = \"public\";\n\n    @Column(name = \"is_active\")\n    private Integer isActive = 1;\n\n    @Column(name = \"unlock_count\")\n    private Integer unlockCount = 0;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n\n    @OneToMany(mappedBy = \"memory\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<MemoryUnlock> memoryUnlocks;\n\n    // Default constructor\n    public Memory() {}\n\n    // Constructor\n    public Memory(User user, String title, String emotion, Double latitude, Double longitude) {\n        this.user = user;\n        this.title = title;\n        this.emotion = emotion;\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public User getUser() { return user; }\n    public void setUser(User user) { this.user = user; }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public String getContent() { return content; }\n    public void setContent(String content) { this.content = content; }\n\n    public String getAudioData() { return audioData; }\n    public void setAudioData(String audioData) { this.audioData = audioData; }\n\n    public String getAudioUrl() { return audioUrl; }\n    public void setAudioUrl(String audioUrl) { this.audioUrl = audioUrl; }\n\n    public String getEmotion() { return emotion; }\n    public void setEmotion(String emotion) { this.emotion = emotion; }\n\n    public Double getEmotionConfidence() { return emotionConfidence; }\n    public void setEmotionConfidence(Double emotionConfidence) { this.emotionConfidence = emotionConfidence; }\n\n    public Double getLatitude() { return latitude; }\n    public void setLatitude(Double latitude) { this.latitude = latitude; }\n\n    public Double getLongitude() { return longitude; }\n    public void setLongitude(Double longitude) { this.longitude = longitude; }\n\n    public String getLocationName() { return locationName; }\n    public void setLocationName(String locationName) { this.locationName = locationName; }\n\n    public Integer getDuration() { return duration; }\n    public void setDuration(Integer duration) { this.duration = duration; }\n\n    public String getAccessType() { return accessType; }\n    public void setAccessType(String accessType) { this.accessType = accessType; }\n\n    public Integer getIsActive() { return isActive; }\n    public void setIsActive(Integer isActive) { this.isActive = isActive; }\n\n    public Integer getUnlockCount() { return unlockCount; }\n    public void setUnlockCount(Integer unlockCount) { this.unlockCount = unlockCount; }\n\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n\n    public List<MemoryUnlock> getMemoryUnlocks() { return memoryUnlocks; }\n    public void setMemoryUnlocks(List<MemoryUnlock> memoryUnlocks) { this.memoryUnlocks = memoryUnlocks; }\n}","size_bytes":4591},"src/main/java/com/echo/model/MemoryUnlock.java":{"content":"package com.echo.model;\n\nimport jakarta.persistence.*;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"memory_unlocks\")\npublic class MemoryUnlock {\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"memory_id\", nullable = false)\n    private Memory memory;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"unlocked_by\", nullable = false)\n    private User unlockedBy;\n\n    @Column(name = \"echo_content\", columnDefinition = \"TEXT\")\n    private String echoContent;\n\n    @Column(name = \"echo_audio_url\")\n    private String echoAudioUrl;\n\n    @CreationTimestamp\n    @Column(name = \"unlocked_at\", nullable = false, updatable = false)\n    private LocalDateTime unlockedAt;\n\n    // Default constructor\n    public MemoryUnlock() {}\n\n    // Constructor\n    public MemoryUnlock(Memory memory, User unlockedBy) {\n        this.memory = memory;\n        this.unlockedBy = unlockedBy;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public Memory getMemory() { return memory; }\n    public void setMemory(Memory memory) { this.memory = memory; }\n\n    public User getUnlockedBy() { return unlockedBy; }\n    public void setUnlockedBy(User unlockedBy) { this.unlockedBy = unlockedBy; }\n\n    public String getEchoContent() { return echoContent; }\n    public void setEchoContent(String echoContent) { this.echoContent = echoContent; }\n\n    public String getEchoAudioUrl() { return echoAudioUrl; }\n    public void setEchoAudioUrl(String echoAudioUrl) { this.echoAudioUrl = echoAudioUrl; }\n\n    public LocalDateTime getUnlockedAt() { return unlockedAt; }\n    public void setUnlockedAt(LocalDateTime unlockedAt) { this.unlockedAt = unlockedAt; }\n}","size_bytes":1876},"src/main/java/com/echo/model/User.java":{"content":"package com.echo.model;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.Size;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Table(name = \"users\")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @NotBlank\n    @Size(min = 3, max = 50)\n    @Column(unique = true, nullable = false)\n    private String username;\n\n    @Email\n    @NotBlank\n    @Column(unique = true, nullable = false)\n    private String email;\n\n    @NotBlank\n    @Size(min = 6)\n    @Column(nullable = false)\n    private String password;\n\n    private String avatar;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String bio;\n\n    @Column(name = \"has_completed_onboarding\")\n    private Integer hasCompletedOnboarding = 0;\n\n    @CreationTimestamp\n    @Column(name = \"created_at\", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n\n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Memory> memories;\n\n    @OneToMany(mappedBy = \"unlockedBy\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<MemoryUnlock> memoryUnlocks;\n\n    // Default constructor\n    public User() {}\n\n    // Constructor\n    public User(String username, String email, String password) {\n        this.username = username;\n        this.email = email;\n        this.password = password;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getUsername() { return username; }\n    public void setUsername(String username) { this.username = username; }\n\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n\n    public String getPassword() { return password; }\n    public void setPassword(String password) { this.password = password; }\n\n    public String getAvatar() { return avatar; }\n    public void setAvatar(String avatar) { this.avatar = avatar; }\n\n    public String getBio() { return bio; }\n    public void setBio(String bio) { this.bio = bio; }\n\n    public Integer getHasCompletedOnboarding() { return hasCompletedOnboarding; }\n    public void setHasCompletedOnboarding(Integer hasCompletedOnboarding) { this.hasCompletedOnboarding = hasCompletedOnboarding; }\n\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n\n    public List<Memory> getMemories() { return memories; }\n    public void setMemories(List<Memory> memories) { this.memories = memories; }\n\n    public List<MemoryUnlock> getMemoryUnlocks() { return memoryUnlocks; }\n    public void setMemoryUnlocks(List<MemoryUnlock> memoryUnlocks) { this.memoryUnlocks = memoryUnlocks; }\n}","size_bytes":2952},"src/main/java/com/echo/repository/MemoryRepository.java":{"content":"package com.echo.repository;\n\nimport com.echo.model.Memory;\nimport com.echo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface MemoryRepository extends JpaRepository<Memory, String> {\n    \n    List<Memory> findByUserOrderByCreatedAtDesc(User user);\n    \n    List<Memory> findByUserIdOrderByCreatedAtDesc(String userId);\n    \n    @Query(\"SELECT m FROM Memory m WHERE m.accessType = 'public' AND m.isActive = 1 ORDER BY m.createdAt DESC\")\n    List<Memory> findPublicActiveMemories();\n    \n    @Query(\"SELECT m FROM Memory m WHERE \" +\n           \"(6371 * acos(cos(radians(:latitude)) * cos(radians(m.latitude)) * \" +\n           \"cos(radians(m.longitude) - radians(:longitude)) + \" +\n           \"sin(radians(:latitude)) * sin(radians(m.latitude)))) < :radius \" +\n           \"AND m.accessType = 'public' AND m.isActive = 1 \" +\n           \"ORDER BY (6371 * acos(cos(radians(:latitude)) * cos(radians(m.latitude)) * \" +\n           \"cos(radians(m.longitude) - radians(:longitude)) + \" +\n           \"sin(radians(:latitude)) * sin(radians(m.latitude))))\")\n    List<Memory> findNearbyMemories(@Param(\"latitude\") Double latitude, \n                                   @Param(\"longitude\") Double longitude, \n                                   @Param(\"radius\") Double radius);\n    \n    @Query(\"SELECT m FROM Memory m WHERE m.emotion = :emotion AND m.accessType = 'public' AND m.isActive = 1 ORDER BY m.createdAt DESC\")\n    List<Memory> findByEmotion(@Param(\"emotion\") String emotion);\n    \n    @Query(\"SELECT m.emotion, COUNT(m) as count FROM Memory m WHERE m.accessType = 'public' AND m.isActive = 1 GROUP BY m.emotion\")\n    List<Object[]> getEmotionStatistics();\n}","size_bytes":1887},"src/main/java/com/echo/repository/UserRepository.java":{"content":"package com.echo.repository;\n\nimport com.echo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, String> {\n    \n    Optional<User> findByUsername(String username);\n    \n    Optional<User> findByEmail(String email);\n    \n    boolean existsByUsername(String username);\n    \n    boolean existsByEmail(String email);\n    \n    @Query(\"SELECT u FROM User u WHERE u.username = :usernameOrEmail OR u.email = :usernameOrEmail\")\n    Optional<User> findByUsernameOrEmail(@Param(\"usernameOrEmail\") String usernameOrEmail);\n}","size_bytes":796},"src/main/java/com/echo/service/AudioProcessingService.java":{"content":"package com.echo.service;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class AudioProcessingService {\n    \n    private final RestTemplate restTemplate;\n    \n    @Value(\"${emotion.service.url:http://localhost:5001}\")\n    private String emotionServiceUrl;\n    \n    public AudioProcessingService() {\n        this.restTemplate = new RestTemplate();\n    }\n    \n    /**\n     * Process audio file: convert to text and analyze emotion\n     */\n    public EmotionAnalysisResult processAudio(MultipartFile audioFile) {\n        try {\n            // For MVP, we'll simulate speech-to-text conversion\n            // In production, you would integrate Vosk here\n            String transcription = simulateSpeechToText(audioFile);\n            \n            // Analyze emotion from transcription\n            return analyzeEmotion(transcription);\n            \n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to process audio: \" + e.getMessage(), e);\n        }\n    }\n    \n    /**\n     * Simulate speech-to-text conversion for MVP\n     * Replace this with actual Vosk integration in production\n     */\n    private String simulateSpeechToText(MultipartFile audioFile) {\n        // Simulate realistic transcriptions based on common emotional content\n        String[] sampleTranscriptions = {\n            \"I'm feeling really nostalgic today, thinking about old memories with friends\",\n            \"This place makes me so happy, I love being here with everyone\",\n            \"I feel calm and peaceful in this beautiful location\",\n            \"I'm excited about this new adventure and what's to come\",\n            \"This moment fills me with gratitude and love for life\",\n            \"I'm contemplating all the changes happening in my life\",\n            \"I feel hopeful about the future and all the possibilities\"\n        };\n        \n        // Return a random sample transcription for demo purposes\n        int index = (int) (Math.random() * sampleTranscriptions.length);\n        return sampleTranscriptions[index];\n    }\n    \n    /**\n     * Analyze emotion from text using Hugging Face microservice\n     */\n    public EmotionAnalysisResult analyzeEmotion(String text) {\n        try {\n            // Prepare request body\n            Map<String, String> requestBody = new HashMap<>();\n            requestBody.put(\"text\", text);\n            \n            // Call emotion analysis microservice\n            String url = emotionServiceUrl + \"/analyze-emotion\";\n            ResponseEntity<Map> response = restTemplate.postForEntity(url, requestBody, Map.class);\n            \n            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {\n                Map<String, Object> result = response.getBody();\n                \n                String emotion = (String) result.get(\"emotion\");\n                Double confidence = ((Number) result.get(\"confidence\")).doubleValue();\n                \n                return new EmotionAnalysisResult(text, emotion, confidence, true);\n            } else {\n                // Fallback to basic emotion detection\n                return fallbackEmotionAnalysis(text);\n            }\n            \n        } catch (Exception e) {\n            System.err.println(\"Failed to call emotion service: \" + e.getMessage());\n            // Fallback to basic emotion detection\n            return fallbackEmotionAnalysis(text);\n        }\n    }\n    \n    /**\n     * Fallback emotion analysis using keyword matching\n     */\n    private EmotionAnalysisResult fallbackEmotionAnalysis(String text) {\n        String lowerText = text.toLowerCase();\n        \n        // Simple keyword-based emotion detection\n        if (lowerText.contains(\"happy\") || lowerText.contains(\"joy\") || lowerText.contains(\"excited\")) {\n            return new EmotionAnalysisResult(text, \"joy\", 0.75, false);\n        } else if (lowerText.contains(\"sad\") || lowerText.contains(\"miss\") || lowerText.contains(\"remember\")) {\n            return new EmotionAnalysisResult(text, \"nostalgia\", 0.70, false);\n        } else if (lowerText.contains(\"love\") || lowerText.contains(\"grateful\") || lowerText.contains(\"thankful\")) {\n            return new EmotionAnalysisResult(text, \"love\", 0.72, false);\n        } else if (lowerText.contains(\"calm\") || lowerText.contains(\"peaceful\") || lowerText.contains(\"serene\")) {\n            return new EmotionAnalysisResult(text, \"calm\", 0.68, false);\n        } else if (lowerText.contains(\"hope\") || lowerText.contains(\"future\") || lowerText.contains(\"dream\")) {\n            return new EmotionAnalysisResult(text, \"hopeful\", 0.65, false);\n        } else {\n            return new EmotionAnalysisResult(text, \"contemplative\", 0.60, false);\n        }\n    }\n    \n    /**\n     * Result class for emotion analysis\n     */\n    public static class EmotionAnalysisResult {\n        private final String transcription;\n        private final String emotion;\n        private final double confidence;\n        private final boolean usedAI;\n        \n        public EmotionAnalysisResult(String transcription, String emotion, double confidence, boolean usedAI) {\n            this.transcription = transcription;\n            this.emotion = emotion;\n            this.confidence = confidence;\n            this.usedAI = usedAI;\n        }\n        \n        // Getters\n        public String getTranscription() { return transcription; }\n        public String getEmotion() { return emotion; }\n        public double getConfidence() { return confidence; }\n        public boolean isUsedAI() { return usedAI; }\n    }\n}","size_bytes":5912},"src/main/java/com/echo/service/MemoryService.java":{"content":"package com.echo.service;\n\nimport com.echo.model.Memory;\nimport com.echo.model.User;\nimport com.echo.repository.MemoryRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Service\npublic class MemoryService {\n\n    @Autowired\n    private MemoryRepository memoryRepository;\n\n    @Autowired\n    private PythonAIService pythonAIService;\n\n    public Memory createMemory(User user, String title, String content, String audioData, \n                              Double latitude, Double longitude, String locationName) {\n        // Get emotion analysis from Python AI service\n        String emotion = pythonAIService.analyzeEmotion(content);\n        Double emotionConfidence = pythonAIService.getEmotionConfidence(content);\n\n        Memory memory = new Memory();\n        memory.setUser(user);\n        memory.setTitle(title);\n        memory.setContent(content);\n        memory.setAudioData(audioData);\n        memory.setEmotion(emotion != null ? emotion : \"neutral\");\n        memory.setEmotionConfidence(emotionConfidence != null ? emotionConfidence : 0.0);\n        memory.setLatitude(latitude);\n        memory.setLongitude(longitude);\n        memory.setLocationName(locationName);\n        memory.setAccessType(\"public\");\n        memory.setIsActive(1);\n\n        return memoryRepository.save(memory);\n    }\n\n    public Optional<Memory> findById(String id) {\n        return memoryRepository.findById(id);\n    }\n\n    public List<Memory> findByUser(User user) {\n        return memoryRepository.findByUserOrderByCreatedAtDesc(user);\n    }\n\n    public List<Memory> findByUserId(String userId) {\n        return memoryRepository.findByUserIdOrderByCreatedAtDesc(userId);\n    }\n\n    public List<Memory> findPublicActiveMemories() {\n        return memoryRepository.findPublicActiveMemories();\n    }\n\n    public List<Memory> findNearbyMemories(Double latitude, Double longitude, Double radiusKm) {\n        Double radius = radiusKm != null ? radiusKm : 10.0; // Default 10km radius\n        return memoryRepository.findNearbyMemories(latitude, longitude, radius);\n    }\n\n    public List<Memory> findByEmotion(String emotion) {\n        return memoryRepository.findByEmotion(emotion);\n    }\n\n    public Memory updateMemory(Memory memory) {\n        return memoryRepository.save(memory);\n    }\n\n    public void deleteMemory(String id) {\n        memoryRepository.deleteById(id);\n    }\n\n    public void incrementUnlockCount(Memory memory) {\n        memory.setUnlockCount(memory.getUnlockCount() + 1);\n        memoryRepository.save(memory);\n    }\n\n    public Map<String, Long> getEmotionStatistics() {\n        List<Object[]> results = memoryRepository.getEmotionStatistics();\n        Map<String, Long> emotionMap = new HashMap<>();\n        \n        for (Object[] result : results) {\n            String emotion = (String) result[0];\n            Long count = (Long) result[1];\n            emotionMap.put(emotion, count);\n        }\n        \n        return emotionMap;\n    }\n\n    public List<Memory> getAllMemories() {\n        return memoryRepository.findAll();\n    }\n}","size_bytes":3205},"src/main/java/com/echo/service/UserService.java":{"content":"package com.echo.service;\n\nimport com.echo.model.User;\nimport com.echo.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private BCryptPasswordEncoder passwordEncoder;\n\n    public User createUser(String username, String email, String password) {\n        if (userRepository.existsByUsername(username)) {\n            throw new RuntimeException(\"Username already exists\");\n        }\n        if (userRepository.existsByEmail(email)) {\n            throw new RuntimeException(\"Email already exists\");\n        }\n\n        User user = new User();\n        user.setUsername(username);\n        user.setEmail(email);\n        user.setPassword(passwordEncoder.encode(password));\n        \n        return userRepository.save(user);\n    }\n\n    public Optional<User> findByUsernameOrEmail(String usernameOrEmail) {\n        return userRepository.findByUsernameOrEmail(usernameOrEmail);\n    }\n\n    public Optional<User> findById(String id) {\n        return userRepository.findById(id);\n    }\n\n    public Optional<User> findByUsername(String username) {\n        return userRepository.findByUsername(username);\n    }\n\n    public Optional<User> findByEmail(String email) {\n        return userRepository.findByEmail(email);\n    }\n\n    public boolean validatePassword(User user, String password) {\n        return passwordEncoder.matches(password, user.getPassword());\n    }\n\n    public User updateUser(User user) {\n        return userRepository.save(user);\n    }\n\n    public void deleteUser(String id) {\n        userRepository.deleteById(id);\n    }\n\n    public List<User> getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    public boolean existsByUsername(String username) {\n        return userRepository.existsByUsername(username);\n    }\n\n    public boolean existsByEmail(String email) {\n        return userRepository.existsByEmail(email);\n    }\n}","size_bytes":2165},"run-java.sh":{"content":"#!/bin/bash\n\n# Start Python AI Service in background\necho \"Starting Python AI Service...\"\ncd python-ai-service\npython main.py &\nPYTHON_PID=$!\ncd ..\n\necho \"Python AI Service started with PID: $PYTHON_PID\"\n\n# Wait a moment for Python service to start\nsleep 3\n\n# Start Java Spring Boot Application\necho \"Starting Java Spring Boot Application...\"\nexport SERVER_PORT=5000\nexport SPRING_PROFILES_ACTIVE=development\n\n# Check if Maven is available\nif command -v mvn &> /dev/null; then\n    mvn spring-boot:run\nelse\n    echo \"Maven not found, trying with Java directly...\"\n    # Compile and run with Java\n    mkdir -p target/classes\n    find src/main/java -name \"*.java\" -exec javac -d target/classes -cp \"$(find ~/.m2/repository -name \"*.jar\" | tr '\\n' ':')\" {} +\n    java -cp \"target/classes:$(find ~/.m2/repository -name \"*.jar\" | tr '\\n' ':')\" com.echo.EchoApplication\nfi\n\n# Cleanup on exit\ntrap \"kill $PYTHON_PID 2>/dev/null\" EXIT","size_bytes":925},"python-ai-service/main.py":{"content":"\"\"\"\nPython AI Service for ECHO\nProvides emotion analysis, audio processing, and AI insights\n\"\"\"\n\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nimport uvicorn\nimport re\nimport random\nfrom typing import Dict, List, Any\nimport base64\n\napp = FastAPI(title=\"ECHO AI Service\", version=\"1.0.0\")\n\nclass TextAnalysisRequest(BaseModel):\n    text: str\n\nclass AudioRequest(BaseModel):\n    audio: str  # Base64 encoded audio\n\nclass EmotionInsightRequest(BaseModel):\n    emotion: str\n    latitude: float | None = None\n    longitude: float | None = None\n\n# Emotion keywords for analysis\nEMOTION_KEYWORDS = {\n    \"joy\": [\"happy\", \"excited\", \"thrilled\", \"delighted\", \"cheerful\", \"elated\", \"joyful\", \"blissful\"],\n    \"love\": [\"love\", \"adore\", \"cherish\", \"heart\", \"affection\", \"romantic\", \"caring\", \"tender\"],\n    \"nostalgia\": [\"remember\", \"childhood\", \"past\", \"memory\", \"nostalgic\", \"reminisce\", \"bygone\", \"yesterday\"],\n    \"calm\": [\"peaceful\", \"serene\", \"tranquil\", \"quiet\", \"relaxed\", \"soothing\", \"gentle\", \"still\"],\n    \"melancholy\": [\"sad\", \"down\", \"blue\", \"melancholy\", \"sorrowful\", \"gloomy\", \"dejected\", \"mournful\"],\n    \"hope\": [\"hope\", \"optimistic\", \"future\", \"dream\", \"aspire\", \"believe\", \"faith\", \"promising\"],\n    \"wonder\": [\"amazing\", \"incredible\", \"wonderful\", \"awe\", \"magical\", \"extraordinary\", \"magnificent\", \"breathtaking\"],\n    \"excitement\": [\"thrilling\", \"exhilarating\", \"energetic\", \"dynamic\", \"vibrant\", \"electrifying\", \"stimulating\"]\n}\n\ndef analyze_emotion_from_text(text: str) -> Dict[str, Any]:\n    \"\"\"Analyze emotion from text using keyword matching and patterns\"\"\"\n    text_lower = text.lower()\n    \n    # Count matches for each emotion\n    emotion_scores = {}\n    \n    for emotion, keywords in EMOTION_KEYWORDS.items():\n        score = sum(1 for keyword in keywords if keyword in text_lower)\n        if score > 0:\n            emotion_scores[emotion] = score\n    \n    # If no keyword matches, use sentiment patterns\n    if not emotion_scores:\n        if any(word in text_lower for word in [\"!\", \"wow\", \"great\", \"awesome\"]):\n            emotion_scores[\"joy\"] = 1\n        elif any(word in text_lower for word in [\".\", \"quiet\", \"moment\", \"peaceful\"]):\n            emotion_scores[\"calm\"] = 1\n        elif any(word in text_lower for word in [\"beautiful\", \"stunning\", \"incredible\"]):\n            emotion_scores[\"wonder\"] = 1\n        else:\n            # Default fallback\n            emotion_scores[\"calm\"] = 1\n    \n    # Get the emotion with highest score\n    if emotion_scores:\n        dominant_emotion = max(emotion_scores, key=lambda x: emotion_scores[x])\n        max_score = emotion_scores[dominant_emotion]\n    else:\n        dominant_emotion = \"calm\"\n        max_score = 1\n    \n    # Calculate confidence based on score and text length\n    confidence = min(0.7 + (max_score * 0.1) + (len(text) / 1000), 0.98)\n    \n    return {\n        \"emotion\": dominant_emotion,\n        \"confidence\": round(confidence, 3),\n        \"all_scores\": emotion_scores\n    }\n\n@app.post(\"/analyze-emotion\")\nasync def analyze_emotion(request: TextAnalysisRequest):\n    \"\"\"Analyze emotion from text content\"\"\"\n    try:\n        if not request.text or not request.text.strip():\n            raise HTTPException(status_code=400, detail=\"Text cannot be empty\")\n        \n        result = analyze_emotion_from_text(request.text)\n        \n        return {\n            \"emotion\": result[\"emotion\"],\n            \"confidence\": result[\"confidence\"],\n            \"analysis\": result[\"all_scores\"]\n        }\n    \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Emotion analysis failed: {str(e)}\")\n\n@app.post(\"/audio-to-text\")\nasync def audio_to_text(request: AudioRequest):\n    \"\"\"Convert audio to text (simulated for demo)\"\"\"\n    try:\n        # In a real implementation, this would use speech-to-text services\n        # For demo purposes, we'll return a simulated transcription\n        \n        if not request.audio:\n            raise HTTPException(status_code=400, detail=\"Audio data cannot be empty\")\n        \n        # Simulate processing time and return mock transcription\n        mock_transcriptions = [\n            \"This place holds so many beautiful memories for me.\",\n            \"I feel incredibly peaceful when I come here.\",\n            \"The sunset from this spot always fills me with wonder.\",\n            \"This location reminds me of childhood adventures.\",\n            \"I love the energy and excitement of this vibrant area.\",\n            \"There's something magical about this quiet corner of the world.\"\n        ]\n        \n        transcription = random.choice(mock_transcriptions)\n        \n        return {\n            \"text\": transcription,\n            \"confidence\": round(random.uniform(0.85, 0.98), 3),\n            \"language\": \"en\"\n        }\n    \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Audio transcription failed: {str(e)}\")\n\n@app.post(\"/emotion-insights\")\nasync def emotion_insights(request: EmotionInsightRequest):\n    \"\"\"Generate insights about emotions and locations\"\"\"\n    try:\n        emotion = request.emotion.lower()\n        \n        # Emotion-specific insights\n        insights_map = {\n            \"joy\": {\n                \"description\": \"Joy radiates from this location, creating positive energy that others can feel.\",\n                \"relatedEmotions\": [\"excitement\", \"love\", \"wonder\"],\n                \"tips\": \"Share this feeling by describing what specifically brings you joy here.\"\n            },\n            \"love\": {\n                \"description\": \"This place resonates with love and connection, drawing hearts together.\",\n                \"relatedEmotions\": [\"joy\", \"calm\", \"nostalgia\"],\n                \"tips\": \"Love shared in meaningful places creates lasting memories.\"\n            },\n            \"nostalgia\": {\n                \"description\": \"Nostalgia flows through this space, connecting past and present moments.\",\n                \"relatedEmotions\": [\"melancholy\", \"love\", \"wonder\"],\n                \"tips\": \"Nostalgic feelings often reveal what matters most to us.\"\n            },\n            \"calm\": {\n                \"description\": \"A sense of peace and tranquility emanates from this location.\",\n                \"relatedEmotions\": [\"hope\", \"wonder\", \"love\"],\n                \"tips\": \"Calm spaces offer refuge and help us reconnect with ourselves.\"\n            },\n            \"melancholy\": {\n                \"description\": \"There's a bittersweet beauty in the melancholy felt here.\",\n                \"relatedEmotions\": [\"nostalgia\", \"hope\", \"calm\"],\n                \"tips\": \"Melancholy can be a pathway to deeper understanding and growth.\"\n            },\n            \"hope\": {\n                \"description\": \"Hope springs eternal from this place, inspiring dreams and possibilities.\",\n                \"relatedEmotions\": [\"joy\", \"love\", \"excitement\"],\n                \"tips\": \"Places that inspire hope often become beacons for future visits.\"\n            },\n            \"wonder\": {\n                \"description\": \"Wonder and awe surround this location, opening minds to new possibilities.\",\n                \"relatedEmotions\": [\"joy\", \"excitement\", \"calm\"],\n                \"tips\": \"Wonder reminds us of the magic that exists in everyday moments.\"\n            },\n            \"excitement\": {\n                \"description\": \"Electric energy and excitement pulse through this vibrant location.\",\n                \"relatedEmotions\": [\"joy\", \"wonder\", \"love\"],\n                \"tips\": \"Exciting places fuel our passion and zest for life.\"\n            }\n        }\n        \n        # Get insights for the emotion, with fallback\n        insights = insights_map.get(emotion, {\n            \"description\": f\"This location holds unique emotional significance related to {emotion}.\",\n            \"relatedEmotions\": [\"calm\", \"wonder\", \"joy\"],\n            \"tips\": \"Every emotion tells a story worth exploring.\"\n        })\n        \n        # Add location-specific context if coordinates provided\n        if request.latitude and request.longitude:\n            insights[\"locationContext\"] = f\"Emotional resonance at coordinates {request.latitude:.4f}, {request.longitude:.4f}\"\n        \n        return {\n            \"emotion\": emotion,\n            \"insights\": insights,\n            \"timestamp\": \"2025-01-03T12:00:00Z\"\n        }\n    \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Insight generation failed: {str(e)}\")\n\n@app.get(\"/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\"status\": \"healthy\", \"service\": \"ECHO AI Service\"}\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"Root endpoint\"\"\"\n    return {\"message\": \"ECHO AI Service\", \"version\": \"1.0.0\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)","size_bytes":8779},"src/main/java/com/echo/controller/EmotionController.java":{"content":"package com.echo.controller;\n\nimport com.echo.service.MemoryService;\nimport com.echo.service.PythonAIService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/emotions\")\npublic class EmotionController {\n\n    @Autowired\n    private MemoryService memoryService;\n\n    @Autowired\n    private PythonAIService pythonAIService;\n\n    @GetMapping(\"/map\")\n    public ResponseEntity<?> getEmotionMap() {\n        try {\n            Map<String, Long> emotionStats = memoryService.getEmotionStatistics();\n            \n            List<Map<String, Object>> emotionData = new ArrayList<>();\n            \n            // Convert to format expected by frontend\n            for (Map.Entry<String, Long> entry : emotionStats.entrySet()) {\n                Map<String, Object> emotionEntry = new HashMap<>();\n                emotionEntry.put(\"emotion\", entry.getKey());\n                emotionEntry.put(\"count\", entry.getValue());\n                emotionEntry.put(\"intensity\", Math.min(entry.getValue() / 10.0, 1.0)); // Normalize intensity\n                emotionData.add(emotionEntry);\n            }\n\n            // Add some default emotions if none exist\n            if (emotionData.isEmpty()) {\n                String[] defaultEmotions = {\"joy\", \"nostalgia\", \"calm\", \"excitement\", \"melancholy\", \"hope\", \"love\", \"wonder\"};\n                for (String emotion : defaultEmotions) {\n                    Map<String, Object> emotionEntry = new HashMap<>();\n                    emotionEntry.put(\"emotion\", emotion);\n                    emotionEntry.put(\"count\", 1L);\n                    emotionEntry.put(\"intensity\", 0.3);\n                    emotionData.add(emotionEntry);\n                }\n            }\n\n            return ResponseEntity.ok(Map.of(\"data\", emotionData));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch emotion map\"));\n        }\n    }\n\n    @PostMapping(\"/analyze\")\n    public ResponseEntity<?> analyzeEmotion(@RequestBody Map<String, String> request) {\n        try {\n            String text = request.get(\"text\");\n            \n            if (text == null || text.trim().isEmpty()) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Text is required\"));\n            }\n\n            String emotion = pythonAIService.analyzeEmotion(text);\n            Double confidence = pythonAIService.getEmotionConfidence(text);\n\n            Map<String, Object> response = new HashMap<>();\n            response.put(\"emotion\", emotion);\n            response.put(\"confidence\", confidence);\n\n            return ResponseEntity.ok(response);\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to analyze emotion\"));\n        }\n    }\n\n    @PostMapping(\"/insights\")\n    public ResponseEntity<?> getEmotionInsights(@RequestBody Map<String, Object> request) {\n        try {\n            String emotion = (String) request.get(\"emotion\");\n            Double latitude = request.get(\"latitude\") != null ? Double.valueOf(request.get(\"latitude\").toString()) : null;\n            Double longitude = request.get(\"longitude\") != null ? Double.valueOf(request.get(\"longitude\").toString()) : null;\n\n            if (emotion == null) {\n                return ResponseEntity.badRequest().body(Map.of(\"message\", \"Emotion is required\"));\n            }\n\n            Map<String, Object> insights = pythonAIService.generateEmotionInsights(emotion, latitude, longitude);\n\n            return ResponseEntity.ok(insights);\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to generate insights\"));\n        }\n    }\n}","size_bytes":3952},"src/main/java/com/echo/controller/MemoryUnlockController.java":{"content":"package com.echo.controller;\n\nimport com.echo.model.Memory;\nimport com.echo.model.MemoryUnlock;\nimport com.echo.model.User;\nimport com.echo.service.MemoryService;\nimport com.echo.service.MemoryUnlockService;\nimport com.echo.service.UserService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/unlocks\")\npublic class MemoryUnlockController {\n\n    @Autowired\n    private MemoryUnlockService memoryUnlockService;\n\n    @Autowired\n    private MemoryService memoryService;\n\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(\"/memory/{memoryId}\")\n    public ResponseEntity<?> unlockMemory(@PathVariable String memoryId,\n                                        @RequestBody Map<String, String> request,\n                                        HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        try {\n            Optional<User> userOptional = userService.findById(userId);\n            Optional<Memory> memoryOptional = memoryService.findById(memoryId);\n\n            if (userOptional.isEmpty() || memoryOptional.isEmpty()) {\n                return ResponseEntity.notFound().build();\n            }\n\n            User user = userOptional.get();\n            Memory memory = memoryOptional.get();\n\n            String echoContent = request.get(\"echoContent\");\n            String echoAudioUrl = request.get(\"echoAudioUrl\");\n\n            MemoryUnlock unlock = memoryUnlockService.unlockMemory(memory, user, echoContent, echoAudioUrl);\n\n            Map<String, Object> response = new HashMap<>();\n            response.put(\"id\", unlock.getId());\n            response.put(\"memoryId\", unlock.getMemory().getId());\n            response.put(\"echoContent\", unlock.getEchoContent());\n            response.put(\"unlockedAt\", unlock.getUnlockedAt());\n\n            return ResponseEntity.ok(response);\n\n        } catch (RuntimeException e) {\n            return ResponseEntity.badRequest().body(Map.of(\"message\", e.getMessage()));\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to unlock memory\"));\n        }\n    }\n\n    @GetMapping(\"/user\")\n    public ResponseEntity<?> getUserUnlocks(HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        try {\n            Optional<User> userOptional = userService.findById(userId);\n            \n            if (userOptional.isEmpty()) {\n                return ResponseEntity.status(401).body(Map.of(\"message\", \"User not found\"));\n            }\n\n            List<MemoryUnlock> unlocks = memoryUnlockService.findByUser(userOptional.get());\n            return ResponseEntity.ok(Map.of(\"unlocks\", unlocks));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch unlocks\"));\n        }\n    }\n\n    @GetMapping(\"/memory/{memoryId}\")\n    public ResponseEntity<?> getMemoryUnlocks(@PathVariable String memoryId) {\n        try {\n            Optional<Memory> memoryOptional = memoryService.findById(memoryId);\n            \n            if (memoryOptional.isEmpty()) {\n                return ResponseEntity.notFound().build();\n            }\n\n            List<MemoryUnlock> unlocks = memoryUnlockService.findByMemory(memoryOptional.get());\n            return ResponseEntity.ok(Map.of(\"unlocks\", unlocks));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to fetch memory unlocks\"));\n        }\n    }\n\n    @GetMapping(\"/check/{memoryId}\")\n    public ResponseEntity<?> checkIfUnlocked(@PathVariable String memoryId, HttpSession session) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId == null) {\n            return ResponseEntity.status(401).body(Map.of(\"message\", \"Not authenticated\"));\n        }\n\n        try {\n            Optional<User> userOptional = userService.findById(userId);\n            Optional<Memory> memoryOptional = memoryService.findById(memoryId);\n\n            if (userOptional.isEmpty() || memoryOptional.isEmpty()) {\n                return ResponseEntity.notFound().build();\n            }\n\n            boolean isUnlocked = memoryUnlockService.hasUserUnlockedMemory(memoryOptional.get(), userOptional.get());\n            return ResponseEntity.ok(Map.of(\"isUnlocked\", isUnlocked));\n\n        } catch (Exception e) {\n            return ResponseEntity.internalServerError().body(Map.of(\"message\", \"Failed to check unlock status\"));\n        }\n    }\n}","size_bytes":5096},"src/main/java/com/echo/controller/WebController.java":{"content":"package com.echo.controller;\n\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class WebController {\n\n    @GetMapping(\"/\")\n    public String home(HttpSession session, Model model) {\n        String userId = (String) session.getAttribute(\"userId\");\n        \n        if (userId != null) {\n            return \"redirect:/dashboard\";\n        }\n        \n        return \"index\";\n    }\n\n    @GetMapping(\"/landing\")\n    public String landing() {\n        return \"index\";\n    }\n\n    @GetMapping(\"/dashboard\")\n    public String dashboard(HttpSession session, Model model) {\n        String userId = (String) session.getAttribute(\"userId\");\n        String username = (String) session.getAttribute(\"username\");\n        \n        if (userId == null) {\n            return \"redirect:/\";\n        }\n        \n        model.addAttribute(\"userId\", userId);\n        model.addAttribute(\"username\", username);\n        \n        return \"dashboard\";\n    }\n}","size_bytes":1084},"src/main/java/com/echo/model/WaitlistUser.java":{"content":"package com.echo.model;\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.Email;\nimport jakarta.validation.constraints.NotBlank;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"waitlist_users\")\npublic class WaitlistUser {\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Email\n    @NotBlank\n    @Column(unique = true, nullable = false)\n    private String email;\n\n    private String source = \"landing_page\";\n\n    @CreationTimestamp\n    @Column(name = \"joined_at\", nullable = false, updatable = false)\n    private LocalDateTime joinedAt;\n\n    // Default constructor\n    public WaitlistUser() {}\n\n    // Constructor\n    public WaitlistUser(String email, String source) {\n        this.email = email;\n        this.source = source;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n\n    public String getSource() { return source; }\n    public void setSource(String source) { this.source = source; }\n\n    public LocalDateTime getJoinedAt() { return joinedAt; }\n    public void setJoinedAt(LocalDateTime joinedAt) { this.joinedAt = joinedAt; }\n}","size_bytes":1344},"src/main/java/com/echo/repository/MemoryUnlockRepository.java":{"content":"package com.echo.repository;\n\nimport com.echo.model.Memory;\nimport com.echo.model.MemoryUnlock;\nimport com.echo.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface MemoryUnlockRepository extends JpaRepository<MemoryUnlock, String> {\n    \n    List<MemoryUnlock> findByUnlockedByOrderByUnlockedAtDesc(User unlockedBy);\n    \n    List<MemoryUnlock> findByMemoryOrderByUnlockedAtDesc(Memory memory);\n    \n    Optional<MemoryUnlock> findByMemoryAndUnlockedBy(Memory memory, User unlockedBy);\n    \n    boolean existsByMemoryAndUnlockedBy(Memory memory, User unlockedBy);\n    \n    @Query(\"SELECT COUNT(mu) FROM MemoryUnlock mu WHERE mu.memory = :memory\")\n    Long countByMemory(@Param(\"memory\") Memory memory);\n    \n    @Query(\"SELECT COUNT(mu) FROM MemoryUnlock mu WHERE mu.unlockedBy = :user\")\n    Long countByUser(@Param(\"user\") User user);\n}","size_bytes":1100},"src/main/java/com/echo/repository/WaitlistUserRepository.java":{"content":"package com.echo.repository;\n\nimport com.echo.model.WaitlistUser;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface WaitlistUserRepository extends JpaRepository<WaitlistUser, String> {\n    \n    Optional<WaitlistUser> findByEmail(String email);\n    \n    boolean existsByEmail(String email);\n}","size_bytes":411},"src/main/java/com/echo/service/MemoryUnlockService.java":{"content":"package com.echo.service;\n\nimport com.echo.model.Memory;\nimport com.echo.model.MemoryUnlock;\nimport com.echo.model.User;\nimport com.echo.repository.MemoryUnlockRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class MemoryUnlockService {\n\n    @Autowired\n    private MemoryUnlockRepository memoryUnlockRepository;\n\n    @Autowired\n    private MemoryService memoryService;\n\n    public MemoryUnlock unlockMemory(Memory memory, User user, String echoContent, String echoAudioUrl) {\n        // Check if already unlocked\n        if (memoryUnlockRepository.existsByMemoryAndUnlockedBy(memory, user)) {\n            throw new RuntimeException(\"Memory already unlocked by this user\");\n        }\n\n        MemoryUnlock unlock = new MemoryUnlock();\n        unlock.setMemory(memory);\n        unlock.setUnlockedBy(user);\n        unlock.setEchoContent(echoContent);\n        unlock.setEchoAudioUrl(echoAudioUrl);\n\n        MemoryUnlock savedUnlock = memoryUnlockRepository.save(unlock);\n\n        // Increment unlock count for the memory\n        memoryService.incrementUnlockCount(memory);\n\n        return savedUnlock;\n    }\n\n    public Optional<MemoryUnlock> findById(String id) {\n        return memoryUnlockRepository.findById(id);\n    }\n\n    public List<MemoryUnlock> findByUser(User user) {\n        return memoryUnlockRepository.findByUnlockedByOrderByUnlockedAtDesc(user);\n    }\n\n    public List<MemoryUnlock> findByMemory(Memory memory) {\n        return memoryUnlockRepository.findByMemoryOrderByUnlockedAtDesc(memory);\n    }\n\n    public Optional<MemoryUnlock> findByMemoryAndUser(Memory memory, User user) {\n        return memoryUnlockRepository.findByMemoryAndUnlockedBy(memory, user);\n    }\n\n    public boolean hasUserUnlockedMemory(Memory memory, User user) {\n        return memoryUnlockRepository.existsByMemoryAndUnlockedBy(memory, user);\n    }\n\n    public Long getUnlockCountForMemory(Memory memory) {\n        return memoryUnlockRepository.countByMemory(memory);\n    }\n\n    public Long getUnlockCountForUser(User user) {\n        return memoryUnlockRepository.countByUser(user);\n    }\n\n    public MemoryUnlock updateUnlock(MemoryUnlock unlock) {\n        return memoryUnlockRepository.save(unlock);\n    }\n\n    public void deleteUnlock(String id) {\n        memoryUnlockRepository.deleteById(id);\n    }\n\n    public List<MemoryUnlock> getAllUnlocks() {\n        return memoryUnlockRepository.findAll();\n    }\n}","size_bytes":2537},"src/main/java/com/echo/service/PythonAIService.java":{"content":"package com.echo.service;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.reactive.function.client.WebClientResponseException;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\n@Service\npublic class PythonAIService {\n\n    @Value(\"${python.service.url:http://localhost:8001}\")\n    private String pythonServiceUrl;\n\n    private final WebClient webClient;\n    private final ObjectMapper objectMapper;\n    private final Random random;\n\n    // Fallback emotions for demo purposes\n    private final String[] emotions = {\"joy\", \"nostalgia\", \"calm\", \"excitement\", \"melancholy\", \"hope\", \"love\", \"wonder\"};\n\n    public PythonAIService() {\n        this.webClient = WebClient.builder().build();\n        this.objectMapper = new ObjectMapper();\n        this.random = new Random();\n    }\n\n    public String analyzeEmotion(String text) {\n        try {\n            Map<String, String> request = new HashMap<>();\n            request.put(\"text\", text);\n\n            String response = webClient.post()\n                    .uri(pythonServiceUrl + \"/analyze-emotion\")\n                    .bodyValue(request)\n                    .retrieve()\n                    .bodyToMono(String.class)\n                    .block();\n\n            JsonNode jsonNode = objectMapper.readTree(response);\n            return jsonNode.get(\"emotion\").asText();\n\n        } catch (Exception e) {\n            // Fallback to simulated emotion analysis for demo\n            return getSimulatedEmotion(text);\n        }\n    }\n\n    public Double getEmotionConfidence(String text) {\n        try {\n            Map<String, String> request = new HashMap<>();\n            request.put(\"text\", text);\n\n            String response = webClient.post()\n                    .uri(pythonServiceUrl + \"/analyze-emotion\")\n                    .bodyValue(request)\n                    .retrieve()\n                    .bodyToMono(String.class)\n                    .block();\n\n            JsonNode jsonNode = objectMapper.readTree(response);\n            return jsonNode.get(\"confidence\").asDouble();\n\n        } catch (Exception e) {\n            // Fallback to simulated confidence for demo\n            return 0.7 + (random.nextDouble() * 0.3); // Random confidence between 0.7-1.0\n        }\n    }\n\n    public String processAudioToText(byte[] audioData) {\n        try {\n            Map<String, Object> request = new HashMap<>();\n            request.put(\"audio\", audioData);\n\n            String response = webClient.post()\n                    .uri(pythonServiceUrl + \"/audio-to-text\")\n                    .bodyValue(request)\n                    .retrieve()\n                    .bodyToMono(String.class)\n                    .block();\n\n            JsonNode jsonNode = objectMapper.readTree(response);\n            return jsonNode.get(\"text\").asText();\n\n        } catch (Exception e) {\n            // Fallback to simulated transcription for demo\n            return \"This is a simulated transcription of the audio memory.\";\n        }\n    }\n\n    public Map<String, Object> generateEmotionInsights(String emotion, Double latitude, Double longitude) {\n        try {\n            Map<String, Object> request = new HashMap<>();\n            request.put(\"emotion\", emotion);\n            request.put(\"latitude\", latitude);\n            request.put(\"longitude\", longitude);\n\n            String response = webClient.post()\n                    .uri(pythonServiceUrl + \"/emotion-insights\")\n                    .bodyValue(request)\n                    .retrieve()\n                    .bodyToMono(String.class)\n                    .block();\n\n            return objectMapper.readValue(response, Map.class);\n\n        } catch (Exception e) {\n            // Fallback to simulated insights for demo\n            Map<String, Object> insights = new HashMap<>();\n            insights.put(\"emotion\", emotion);\n            insights.put(\"description\", \"This emotion resonates with many people in this area.\");\n            insights.put(\"relatedEmotions\", new String[]{\"connected\", \"peaceful\", \"reflective\"});\n            return insights;\n        }\n    }\n\n    private String getSimulatedEmotion(String text) {\n        // Simple keyword-based emotion detection for demo\n        text = text.toLowerCase();\n        \n        if (text.contains(\"happy\") || text.contains(\"joy\") || text.contains(\"excited\")) {\n            return \"joy\";\n        } else if (text.contains(\"sad\") || text.contains(\"down\") || text.contains(\"cry\")) {\n            return \"melancholy\";\n        } else if (text.contains(\"love\") || text.contains(\"heart\") || text.contains(\"care\")) {\n            return \"love\";\n        } else if (text.contains(\"remember\") || text.contains(\"past\") || text.contains(\"childhood\")) {\n            return \"nostalgia\";\n        } else if (text.contains(\"peaceful\") || text.contains(\"quiet\") || text.contains(\"relax\")) {\n            return \"calm\";\n        } else if (text.contains(\"amazing\") || text.contains(\"beautiful\") || text.contains(\"wow\")) {\n            return \"wonder\";\n        } else if (text.contains(\"hope\") || text.contains(\"future\") || text.contains(\"dream\")) {\n            return \"hope\";\n        } else {\n            // Random fallback\n            return emotions[random.nextInt(emotions.length)];\n        }\n    }\n}","size_bytes":5485}}}